"singleMR2_inf",  "singleMR2_res", "singleMR2_shan", "singleMR2_avganti",
"banMR_inf",  "banMR_res", "banMR_shan", "banMR_avganti",
"banMR2_inf",  "banMR2_res", "banMR2_shan", "banMR2_avganti")] <- NA
win_import_2class$scen <- "Two Classes"
win_import_4class <- readRDS("MDR_run_four.RDS")
win_import_4class$scen <- "Four Classes"
colnames(win_import_4class)[grep("MR1", colnames(win_import_4class))] <- c("singleMR_inf", "banMR_inf", "singleMR_res" , "banMR_res",
"singleMR_shan","banMR_shan","banMR_avganti")
#The MR1 in the avganti for single MR intervention is already without the MR1
win_import_base <- win_import_base[,colnames(win_import_4class)]
win_import_biasPED <- win_import_biasPED[,colnames(win_import_4class)]
win_import_25 <- win_import_25[,colnames(win_import_4class)]
win_import_75 <- win_import_75[,colnames(win_import_4class)]
win_import_2class <- win_import_2class[,colnames(win_import_4class)]
win_import_realPED <- win_import_realPED[,colnames(win_import_4class)]
comb_imp <- rbind(win_import_base,win_import_realPED, win_import_biasPED, win_import_25, win_import_75, win_import_2class, win_import_4class)
# Altering Data Infections ------------------------------------------------
#Infections
#We want to minimise this - minimise the increase in total infections for each change in usage
win_inf <- comb_imp[,1:15]
win_inf_trans <- t(apply(win_inf, 1, function(x) {
val = min(x, na.rm = T)
x[x != val] <- 0
x[x == val] <- 1
return(x)}
))
win_inf_trans <- data.frame(win_inf_trans); win_inf_trans$scen <- comb_imp[, 61]
inf_frame <- data.frame(matrix(NA, nrow = 0, ncol = 15))
for(i in unique(win_inf_trans$scen)) {
data <- win_inf_trans[win_inf_trans$scen == i, 1:15]
prop_win_inf <- data.frame("Infections" = colSums(data)/nrow(data),
"Interventions" = as.factor(c("FT", "ST (HR)", "ST (MR1)","ST (MR2)",
"ST (LR)",
"DT (1Rd)", "DT (2Rd)",
"DT (3Rd)", "DT (4Rd)",
"DT (5Rd)", "DT (6Rd)",
"Ban (HR)", "Ban (MR1)","Ban (MR2)", "Ban (LR)")))
prop_win_inf$Interventions <- factor(prop_win_inf$Interventions, levels = c(prop_win_inf$Interventions))
prop_win_inf$scen <- i
inf_frame <- rbind(inf_frame, prop_win_inf)
}
inf_frame$scen <- factor(inf_frame$scen, levels = rev(unique(inf_frame$scen)))
inf_frame$factor <- c(rep("Baseline", 15), rep("Other", 6*15))
inf_frame$factor <- factor(inf_frame$factor, levels = unique(inf_frame$factor))
inf_frame$Int <- as.factor(rep(c(rep("Tax", 11),rep("Bans", 4)), 7))
inf_frame$Int <- factor(inf_frame$Int, levels = unique(inf_frame$Int))
inf_plot <- ggplot(inf_frame, aes(Interventions, scen)) + theme_bw() +
geom_tile(aes(fill = Infections)) + scale_fill_distiller(palette ="Blues", direction = 1) +
facet_grid(factor~ Int, scales  = "free", space = "free") +
scale_x_discrete(name = "", expand = c(0, 0)) + ggtitle("Total Infections") +
theme(strip.background = element_blank(), axis.text=element_text(size=11),
strip.text = element_blank(), legend.position="bottom",
plot.title = element_text(face = "bold", size = 15),
axis.text.x = element_text(angle = 0, hjust=0.5)) +
scale_y_discrete(name = "", expand = c(0, 0)) +
guides(fill = guide_colorbar(title = "Probability that Intervention Wins",
label.position = "bottom",
title.position = "left", title.vjust = 1,
# draw border around the legend
frame.colour = "black",
barwidth = 10,
barheight = 1))
# Altering Data Resistance ------------------------------------------------
#We want to minimise this - minimise the increase in total infections for each change in usage
win_res <- comb_imp[,16:30]
#win_inf <- (win_import_pess[,1:10])
#win_inf <- (win_import_opt[,1:10])
win_res[win_res == -1000] <- 1000
win_res_trans <- t(apply(win_res[,1:15], 1, function(x) {
val = min(x, na.rm = T)
x[x != val] <- 0
x[x == val] <- 1
return(x)}
))
win_res_trans <- data.frame(win_res_trans); win_res_trans$scen <- comb_imp[, 61]
res_frame <- data.frame(matrix(NA, nrow = 0, ncol = 11))
for(i in unique(win_res_trans$scen)) {
data <- win_res_trans[win_res_trans$scen == i,1:15]
prop_win_res <- data.frame("Resistance" = colSums(data)/nrow(data),
"Interventions" = as.factor(c("FT", "ST (HR)", "ST (MR1)","ST (MR2)",
"ST (LR)",
"DT (1Rd)", "DT (2Rd)",
"DT (3Rd)", "DT (4Rd)",
"DT (5Rd)", "DT (6Rd)",
"Ban (HR)", "Ban (MR1)","Ban (MR2)", "Ban (LR)")))
prop_win_res$Interventions <- factor(prop_win_res$Interventions, levels = c(prop_win_res$Interventions))
prop_win_res$scen <- i
res_frame <- rbind(res_frame, prop_win_res)
}
res_frame$scen <- factor(res_frame$scen, levels = rev(unique(res_frame$scen)))
res_frame$factor <- c(rep("Baseline", 15), rep("Other", 6*15))
res_frame$factor <- factor(res_frame$factor, levels = unique(res_frame$factor))
res_frame$Int <- as.factor(rep(c(rep("Tax", 11),rep("Bans", 4)), 7))
res_frame$Int <- factor(res_frame$Int, levels = unique(res_frame$Int))
res_plot <- ggplot(res_frame, aes(Interventions, scen)) + theme_bw() +
geom_tile(aes(fill = Resistance)) + scale_fill_distiller(palette ="Blues", direction = 1) +
facet_grid(factor~ Int, scales  = "free", space = "free") +
scale_x_discrete(name = "", expand = c(0, 0)) +  ggtitle("Average Resistance") +
theme(strip.background = element_blank(), axis.text=element_text(size=11),
plot.title = element_text(face = "bold", size = 15),
strip.text = element_blank(), legend.position="bottom",
axis.text.x =element_text(angle = 0, hjust=0.5)) +
scale_y_discrete(name = "", expand = c(0, 0)) +
guides(fill = guide_colorbar(title = "Probability that Intervention Wins",
label.position = "bottom",
title.position = "left", title.vjust = 1,
# draw border around the legend
frame.colour = "black",
barwidth = 10,
barheight = 1))
# Average Antibiotics Available -------------------------------------------
win_avganti <- round((comb_imp[,46:60]), 5)
win_avganti$scen <- comb_imp[, 61]
win_avganti$rowsum <- rowSums(win_avganti[,-16], na.rm = T)
win_avganti <- win_avganti[win_avganti$rowsum!=0,]; scen_remov <- win_avganti[,16]
win_avganti <- win_avganti[,-c(16:17)]
win_avganti_trans <- t(apply(win_avganti, 1, function(x) {
val = max(x, na.rm = T)
x[x != val] <- 0
x[x == val] <- 1
return(x)}
))
win_avganti_trans <- data.frame(win_avganti_trans); win_avganti_trans$scen <- scen_remov
avganti_frame <- data.frame(matrix(NA, nrow = 0, ncol = 15))
for(i in unique(win_avganti_trans$scen)) {
data <- win_avganti_trans[win_avganti_trans$scen == i,1:15]
prop_win_avganti <- data.frame("AverageAnti" = colSums(data)/nrow(data),
"Interventions" = as.factor(c("FT", "ST (HR)", "ST (MR1)","ST (MR2)",
"ST (LR)",
"DT (1Rd)", "DT (2Rd)",
"DT (3Rd)", "DT (4Rd)",
"DT (5Rd)", "DT (6Rd)",
"Ban (HR)", "Ban (MR1)","Ban (MR2)", "Ban (LR)")))
prop_win_avganti$Interventions <- factor(prop_win_avganti$Interventions, levels = c(prop_win_avganti$Interventions))
prop_win_avganti$scen <- i
avganti_frame <- rbind(avganti_frame, prop_win_avganti)
}
avganti_frame$scen <- factor(avganti_frame$scen, levels = rev(unique(avganti_frame$scen)))
avganti_frame$factor <- c(rep("Baseline", 15), rep("Other", 15*6))
avganti_frame$factor <- factor(avganti_frame$factor, levels = unique(avganti_frame$factor))
avganti_frame$Int <- as.factor(rep(c(rep("Tax", 11),rep("Bans", 4)), 7))
avganti_frame$Int <- factor(avganti_frame$Int, levels = unique(avganti_frame$Int))
avg_anti_plot <- ggplot(avganti_frame, aes(Interventions, scen)) + theme_bw() +
geom_tile(aes(fill = AverageAnti)) + scale_fill_distiller(palette ="Blues", direction = 1) +
facet_grid(factor~ Int, scales  = "free", space = "free") +
scale_x_discrete(name = "", expand = c(0, 0))  +  ggtitle("Average Antibiotics Available") +
theme(strip.background = element_blank(), axis.text=element_text(size=11),
strip.text = element_blank(), legend.position="bottom",
plot.title = element_text(face = "bold", size = 15),
axis.text.x = element_text(angle = 0, hjust=0.5)) +
scale_y_discrete(name = "", expand = c(0, 0)) +
guides(fill = guide_colorbar(title = "Probability that Intervention Wins",
label.position = "bottom",
title.position = "left", title.vjust = 1,
# draw border around the legend
frame.colour = "black",
barwidth = 10,
barheight = 1))
# Intervention Failure Plot  ----------------------------------------------
int_failure <- comb_imp[,c(16:30,61)]
prop_vec <- data.frame("intervention" = as.factor(rep(colnames(int_failure)[-16], 7)),
"prop_inc" = NA,
"scen" = NA)
for(z in 1:7) {
win_import <- int_failure[int_failure$scen == unique(int_failure$scen)[z],-16]
for(i in 1:15) {
prop_1000 <- win_import[,i]
prop_vec[i+(15*(z-1)),2] <- length(prop_1000[prop_1000 == -1000])/sum(!is.na(prop_1000))
prop_vec[i+(15*(z-1)),3] <- c("Baseline", "Case Study", "Severe", "25% Thresh", "75% Thresh", "Two Classes", "Four Classes")[z]
}
}
prop_vec$intervention <- rep(c("FT", "ST (HR)", "ST (MR1)","ST (MR2)",
"ST (LR)",
"DT (1Rd)", "DT (2Rd)",
"DT (3Rd)", "DT (4Rd)",
"DT (5Rd)", "DT (6Rd)",
"Ban (HR)", "Ban (MR1)","Ban (MR2)", "Ban (LR)"), 7)
prop_vec$intervention <- factor(prop_vec$intervention, levels = unique(prop_vec$intervention))
prop_vec$factor <- c(rep("Baseline", 15), rep("Other", 15*6))
prop_vec$factor <- factor(prop_vec$factor, levels = unique(prop_vec$factor))
prop_vec$Int <- as.factor(rep(c(rep("Tax", 11),rep("Bans", 4)), 7))
prop_vec$Int <- factor(prop_vec$Int, levels = unique(prop_vec$Int))
int_failure_p <- ggplot(prop_vec, aes(intervention, scen)) + theme_bw() +
geom_tile(aes(fill = prop_inc)) + scale_fill_distiller(palette ="Reds", direction = 1)  +
facet_grid(factor~ Int, scales  = "free", space = "free") +
scale_x_discrete(name = "", expand = c(0, 0))  +  ggtitle("Probability of Intervention Failure") +
theme(strip.background = element_blank(), axis.text=element_text(size=11),
strip.text = element_blank(), legend.position="bottom",
plot.title = element_text(face = "bold", size = 15),
axis.text.x = element_text(angle = 0, hjust=0.5)) +
scale_y_discrete(name = "", expand = c(0, 0)) +
guides(fill = guide_colorbar(title = "Probability of Intervention Failure",
label.position = "bottom",
title.position = "left", title.vjust = 1,
# draw border around the legend
frame.colour = "black",
barwidth = 10,
barheight = 1))
# Combination Plot --------------------------------------------------------
test <- ggarrange(res_plot, inf_plot,avg_anti_plot, ncol = 1, nrow = 3)
ggsave(test, filename = "scen_compare.png", dpi = 300, width = 13, height = 12, units = "in",
path = "/Users/amorgan/Desktop")
ggsave(int_failure_p, filename = "int_failure.png", dpi = 300, width = 13, height = 6, units = "in",
path = "/Users/amorgan/Desktop")
library("deSolve"); library("ggplot2"); library("plotly"); library("reshape2"); library("bayestestR"); library("ggpubr")
rm(list=ls())
setwd("/Users/amorgan/Documents/PostDoc/Diff_Tax_Analysis/Theoretical_Analysis/Interpolat_Diff_Tax/Model_Fit/Model_Output/New")
# Model -------------------------------------------------------------------
amr <- function(t, y, parms, sigma_use1, sigma_use2, sigma_use3) {
with(as.list(c(y, parms)), {
#Specify the time-varying functions
sigma_use1 <- sigma_func1(t)
sigma_use2 <- sigma_func2(t)
sigma_use3 <- sigma_func3(t)
#ODES Below
dX = lambda - lambda*X - beta*X*(Wt + R1*c1 + R2*c2 + R3*c3 + R12*c12 + R13*c13 + R23*c23 + R123*c123) +
r_wt*Wt*(1 - (sigma_use1 + sigma_use2 + sigma_use3)) + r_r*R1*(1-(sigma_use2 + sigma_use3)) + r_r*R2*(1-(sigma_use1 + sigma_use3)) + r_r*R3*(1-(sigma_use1 + sigma_use2)) +
r_rr*R12*(1-sigma_use3) + r_rr*R13*(1-sigma_use2) + r_rr*R23*(1-sigma_use1) +
r_rrr*R123 +
r_t*(1-rho)*(Wt*(sigma_use1 + sigma_use2 + sigma_use3) + R1*(sigma_use2 + sigma_use3) +
R2*(sigma_use1 + sigma_use3) + R3*(sigma_use1 + sigma_use2) +
R12*sigma_use3 + R13*sigma_use2 + R23*sigma_use1)
dWt = - lambda*Wt + beta*X*Wt - r_wt*Wt*(1 - (sigma_use1 + sigma_use2 + sigma_use3)) - r_t*Wt*(1-rho)*(sigma_use1 + sigma_use2 + sigma_use3) +
eta_rw*(R1 + R2 + R3 + R12 + R13 + R23 + R123)*(1 - (sigma_use1 + sigma_use2 + sigma_use3)) -
eta_wr*Wt*rho*(sigma_use1 + sigma_use2 + sigma_use3)
dR1 = - lambda*R1 + beta*X*R1*c1 - r_t*(1-rho)*(sigma_use2 + sigma_use3)*R1 - r_r*(1-(sigma_use2 + sigma_use3))*R1 - eta_rr*R1*rho*sigma_use2 -
eta_rr*R1*rho*sigma_use3 - eta_rw*R1*(1 - (sigma_use1 + sigma_use2 + sigma_use3)) + eta_wr*rho*Wt*sigma_use1
dR2 = - lambda*R2 + beta*X*R2*c2 - r_t*(1-rho)*(sigma_use1 + sigma_use3)*R2 - r_r*(1-(sigma_use1 + sigma_use3))*R2 - eta_rr*R2*rho*sigma_use1 -
eta_rr*R2*rho*sigma_use3 - eta_rw*R2*(1 - (sigma_use1 + sigma_use2 + sigma_use3)) + eta_wr*rho*Wt*sigma_use2
dR3 = - lambda*R3 + beta*X*R3*c3 - r_t*(1-rho)*(sigma_use1 + sigma_use2)*R3 - r_r*(1-(sigma_use1 + sigma_use2))*R3 - eta_rr*R3*rho*sigma_use1 -
eta_rr*R3*rho*sigma_use2 - eta_rw*R3*(1 - (sigma_use1 + sigma_use2 + sigma_use3)) + eta_wr*rho*Wt*sigma_use3
dR12 = - lambda*R12 + beta*X*R12*c12 - r_t*(1-rho)*sigma_use3*R12 - r_rr*(1-sigma_use3)*R12 - eta_rrr*R12*rho*sigma_use3 -
eta_rw*R12*(1 - (sigma_use1 + sigma_use2 + sigma_use3)) + eta_rr*R1*rho*sigma_use2 + eta_rr*R2*rho*sigma_use1
dR13 = - lambda*R13 + beta*X*R13*c13 - r_t*(1-rho)*sigma_use2*R13 - r_rr*(1-sigma_use2)*R13 - eta_rrr*R13*rho*sigma_use2 -
eta_rw*R13*(1 - (sigma_use1 + sigma_use2 + sigma_use3)) + eta_rr*R1*rho*sigma_use3 + eta_rr*R3*rho*sigma_use1
dR23 = - lambda*R23 + beta*X*R23*c23 - r_t*(1-rho)*sigma_use1*R23 - r_rr*(1-sigma_use1)*R23 - eta_rrr*R23*rho*sigma_use1 -
eta_rw*R23*(1 - (sigma_use1 + sigma_use2 + sigma_use3)) + eta_rr*R2*rho*sigma_use3 + eta_rr*R3*rho*sigma_use2
dR123 = - lambda*R123 + beta*X*R123*c123 - r_rrr*R123 - eta_rw*R123*(1 - (sigma_use1 + sigma_use2 + sigma_use3)) +
eta_rrr*rho*(sigma_use3*R12 + sigma_use2*R13 + sigma_use1*R23)
return(list(c(dX,dWt,
dR1,dR2,dR3,
dR12,dR13,dR23,
dR123)))
})
}
# Function to Aggregate Resistance ----------------------------------------
agg_func <- function(data) {
agg_data <- data.frame("time" = data$time,
"Susc" = data$X,
"WT" = data$Wt,
"R1" = data$R1 + data$R12 + data$R13 + data$R123,
"R2" = data$R2 + data$R12 + data$R23 + data$R123,
"R3" = data$R3 + data$R13 + data$R23 + data$R123)
return(agg_data)
}
# Extract Sigmas for the ApproxFun Function -------------------------------
approx_sigma <- function(sigma_mat){
usage = data.frame("time" = seq(0,10000),
"PopUsage1" = c(rep(sigma_mat[1,1], 3000),
rep(sigma_mat[1,2], 365*3), rep(sigma_mat[1,3], 365*3), rep(sigma_mat[1,4], 365*3),
rep(sigma_mat[1,5], 365*3), rep(sigma_mat[1,6], 365*3), rep(sigma_mat[1,7], 10001 - (3000 + (365*3)*5))),
"PopUsage2" = c(rep(sigma_mat[2,1], 3000),
rep(sigma_mat[2,2], 365*3), rep(sigma_mat[2,3], 365*3), rep(sigma_mat[2,4], 365*3),
rep(sigma_mat[2,5], 365*3), rep(sigma_mat[2,6], 365*3), rep(sigma_mat[2,7], 10001 - (3000 + (365*3)*5))),
"PopUsage3" = c(rep(sigma_mat[3,1], 3000),
rep(sigma_mat[3,2], 365*3), rep(sigma_mat[3,3], 365*3), rep(sigma_mat[3,4], 365*3),
rep(sigma_mat[3,5], 365*3), rep(sigma_mat[3,6], 365*3), rep(sigma_mat[3,7], 10001 - (3000 + (365*3)*5))))
return(usage)
}
# ODE Wrapper Function ----------------------------------------------------
ode_wrapper <- function(times, y, parms, func, approx_sigma) {
sigma_mat = matrix(c(rep(parms[["sigma1"]], 7),
rep(parms[["sigma2"]], 7),
rep(parms[["sigma3"]], 7)),
nrow = 3, ncol = 7, byrow = T)
eff_tax <- parms[["eff_tax"]]; PED <- parms[["PED"]]
if(parms[["int_round"]] > 0 ) {
for(i in 1:parms[["int_round"]]) {
stor_sigma <- sigma_mat[,i]
sigma_mat[,(i+1):7] = c(stor_sigma[1]*(1 + ((eff_tax[1,i]*PED[1,1]) + (eff_tax[2,i]*PED[2,1]) + (eff_tax[3,i]*PED[3,1]))),
stor_sigma[2]*(1 + ((eff_tax[1,i]*PED[1,2]) + (eff_tax[2,i]*PED[2,2]) + (eff_tax[3,i]*PED[3,2]))),
stor_sigma[3]*(1 + ((eff_tax[1,i]*PED[1,3]) + (eff_tax[2,i]*PED[2,3]) + (eff_tax[3,i]*PED[3,3]))))
sigma_mat[,(i+1):7][sigma_mat[,(i+1)] < 0.01] <- 0.01
if(colSums(sigma_mat)[i+1] > 1) {
sigma_mat[,(i+1):7] <- sigma_mat[,i+1]/(sum(sigma_mat[,i+1])+0.01)
}
}
}
parms[["sigma_mat"]] <- sigma_mat
sigma_data <- approx_sigma(sigma_mat)
sigma_func1 <<- approxfun(sigma_data[,c(1,2)], rule = 2)
sigma_func2 <<- approxfun(sigma_data[,c(1,3)], rule = 2)
sigma_func3 <<- approxfun(sigma_data[,c(1,4)], rule = 2)
#Run the model
out <- data.frame(ode(y = y, func = func, times = times, parms = parms))
return(list(out, parms))
}
# Examining Posteriors ----------------------------------------------------
post_dist_names <- grep("ABC_v1_",
list.files("/Users/amorgan/Documents/PostDoc/Diff_Tax_Analysis/Theoretical_Analysis/Interpolat_Diff_Tax/Model_Fit/Model_Output/New"), value = TRUE)
post_dist <- lapply(post_dist_names, read.csv)
post_dist <- mapply(cbind, post_dist, "gen" = sapply(1:length(post_dist), function(x) paste0("gen_", x)),
SIMPLIFY=F)
post_dist <- do.call("rbind", post_dist)
maps_est <- colMeans(post_dist[post_dist$gen == tail(unique(post_dist$gen),1),][,1:11])
maps_est <-  map_estimate(post_dist[post_dist$gen == tail(unique(post_dist$gen),1),][,1:11])
test <- post_dist[,c(1,12)]
test_10 <- test[test$gen == "gen_10",]
ggplot(test_10, aes(x= test_10[,1], fill=gen)) + geom_density(alpha=.5) +
geom_vline(xintercept = maps_est[1,2], size = 1.2, col = "red") +
scale_x_continuous(expand = c(0, 0), name = colnames(post_dist)[-12][1]) +
scale_y_continuous(expand = c(0, 0)) +
theme(legend.text=element_text(size=14),axis.text=element_text(size=14),
axis.title.y=element_text(size=14),axis.title.x= element_text(size=14), plot.margin = unit(c(0.5,0.5,0.5,0.5), "cm"))
p_list <- list()
for(i in 1:(length(post_dist)-1)) {
p_list[[i]] <- local ({
name_exp <- post_dist[,c(i,12)]
p <- ggplot(name_exp, aes(x= name_exp[,1], fill=gen)) + geom_density(alpha=.5) +
geom_vline(xintercept = maps_est[i,2], size = 1.2, col = "red") +
scale_x_continuous(expand = c(0, 0), name = colnames(post_dist)[-12][i]) +
scale_y_continuous(expand = c(0, 0)) +
theme(legend.text=element_text(size=14),axis.text=element_text(size=14),
axis.title.y=element_text(size=14),axis.title.x= element_text(size=14), plot.margin = unit(c(0.5,0.5,0.5,0.5), "cm"))
return(p)
})
}
ggarrange( p_list[[1]],  p_list[[2]],  p_list[[3]],
p_list[[4]],  p_list[[5]],  p_list[[6]],
p_list[[7]],  p_list[[8]],  p_list[[9]],
p_list[[10]],  p_list[[11]], nrow = 4, ncol = 3, common.legend = T, legend = "bottom")
# Parms -------------------------------------------------------------------
init <- c(X = 0.99, Wt = 1-0.99, R1 = 0, R2 = 0, R3 = 0,
R12 = 0, R13 = 0, R23 = 0,
R123 = 0)
test <- post_dist[post_dist$gen == "gen_10",][1,]
parms = list(lambda = 1/365*(2), int_round = 1,
beta = test["beta"],
sigma1 = 0.25, sigma2 = 0.25, sigma3 = 0.25,
r_wt = 1/12, r_r = 1/10,  r_rr = 1/9,  r_rrr = 1/8,
r_t = 1/7,
eta_wr = test["eta_wr"],
eta_rw = test["eta_rw"],
eta_rr = test["eta_rr_rrr"], eta_rrr = test["eta_rr_rrr"],
c1 = test["c1"], c2 = test["c2"],
c3 = test["c3"],
c12 = test["c12"], c13 = test["c13"],
c23 = test["c23"],
c123 = test["c123"],
PED = matrix(c(-1, 0.4, 0.4,
0.4, -1, 0.4,
0.4, 0.4, -1), #Be aware of this matrix
nrow = 3, ncol = 3, byrow = T),
eff_tax = matrix(c(0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0),
nrow = 3, ncol = 6, byrow = T),
t_n = 3000, time_between = Inf, rho = 0.05, base_tax = 0.5)
# Model Fit Testing -------------------------------------------------------
out <- agg_func(ode_wrapper(y = init, func = amr, times = seq(0, 10000), parms = parms, approx_sigma)[[1]])
parms
test <- c(post_dist[post_dist$gen == "gen_10",][1,])
test
parms = list(lambda = 1/365*(2), int_round = 1,
beta = test["beta"],
sigma1 = 0.25, sigma2 = 0.25, sigma3 = 0.25,
r_wt = 1/12, r_r = 1/10,  r_rr = 1/9,  r_rrr = 1/8,
r_t = 1/7,
eta_wr = test["eta_wr"],
eta_rw = test["eta_rw"],
eta_rr = test["eta_rr_rrr"], eta_rrr = test["eta_rr_rrr"],
c1 = test["c1"], c2 = test["c2"],
c3 = test["c3"],
c12 = test["c12"], c13 = test["c13"],
c23 = test["c23"],
c123 = test["c123"],
PED = matrix(c(-1, 0.4, 0.4,
0.4, -1, 0.4,
0.4, 0.4, -1), #Be aware of this matrix
nrow = 3, ncol = 3, byrow = T),
eff_tax = matrix(c(0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0),
nrow = 3, ncol = 6, byrow = T),
t_n = 3000, time_between = Inf, rho = 0.05, base_tax = 0.5)
parms
test <- as.numeric(c(post_dist[post_dist$gen == "gen_10",][1,]))
test
test[["beta"]]
test[["beta"]]
test <- c(post_dist[post_dist$gen == "gen_10",][1,])
test[["beta"]]
init <- c(X = 0.99, Wt = 1-0.99, R1 = 0, R2 = 0, R3 = 0,
R12 = 0, R13 = 0, R23 = 0,
R123 = 0)
test <- c(post_dist[post_dist$gen == "gen_10",][1,])
parms = list(lambda = 1/365*(2), int_round = 1,
beta = test[["beta"]],
sigma1 = 0.25, sigma2 = 0.25, sigma3 = 0.25,
r_wt = 1/12, r_r = 1/10,  r_rr = 1/9,  r_rrr = 1/8,
r_t = 1/7,
eta_wr = test[["eta_wr"]],
eta_rw = test[["eta_rw"]],
eta_rr = test[["eta_rr_rrr"]], eta_rrr = test[["eta_rr_rrr"]],
c1 = test[["c1"]], c2 = test[["c2"]],
c3 = test[["c3"]],
c12 = test[["c12"]], c13 = test[["c13"]],
c23 = test[["c23"]],
c123 = test[["c123"]],
PED = matrix(c(-1, 0.4, 0.4,
0.4, -1, 0.4,
0.4, 0.4, -1), #Be aware of this matrix
nrow = 3, ncol = 3, byrow = T),
eff_tax = matrix(c(0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0),
nrow = 3, ncol = 6, byrow = T),
t_n = 3000, time_between = Inf, rho = 0.05, base_tax = 0.5)
parms
out <- agg_func(ode_wrapper(y = init, func = amr, times = seq(0, 10000), parms = parms, approx_sigma)[[1]])
out_m <- melt(out, id.vars = "time", measure.vars = colnames(out)[4:6])
ggplot(out_m, aes(time, value, color = variable)) + geom_line()
0.25*0.05
init <- c(X = 0.99, Wt = 1-0.99, R1 = 0, R2 = 0, R3 = 0,
R12 = 0, R13 = 0, R23 = 0,
R123 = 0)
test <- c(post_dist[post_dist$gen == "gen_10",][2,])
parms = list(lambda = 1/365*(2), int_round = 1,
beta = test[["beta"]],
sigma1 = 0.25, sigma2 = 0.25, sigma3 = 0.25,
r_wt = 1/12, r_r = 1/10,  r_rr = 1/9,  r_rrr = 1/8,
r_t = 1/7,
eta_wr = test[["eta_wr"]],
eta_rw = test[["eta_rw"]],
eta_rr = test[["eta_rr_rrr"]], eta_rrr = test[["eta_rr_rrr"]],
c1 = test[["c1"]], c2 = test[["c2"]],
c3 = test[["c3"]],
c12 = test[["c12"]], c13 = test[["c13"]],
c23 = test[["c23"]],
c123 = test[["c123"]],
PED = matrix(c(-1, 0.4, 0.4,
0.4, -1, 0.4,
0.4, 0.4, -1), #Be aware of this matrix
nrow = 3, ncol = 3, byrow = T),
eff_tax = matrix(c(0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0),
nrow = 3, ncol = 6, byrow = T),
t_n = 3000, time_between = Inf, rho = 0.05, base_tax = 0.5)
# Model Fit Testing -------------------------------------------------------
out <- agg_func(ode_wrapper(y = init, func = amr, times = seq(0, 10000), parms = parms, approx_sigma)[[1]])
out_m <- melt(out, id.vars = "time", measure.vars = colnames(out)[4:6])
ggplot(out_m, aes(time, value, color = variable)) + geom_line()
init <- c(X = 0.99, Wt = 1-0.99, R1 = 0, R2 = 0, R3 = 0,
R12 = 0, R13 = 0, R23 = 0,
R123 = 0)
test <- c(post_dist[post_dist$gen == "gen_10",][3,])
parms = list(lambda = 1/365*(2), int_round = 1,
beta = test[["beta"]],
sigma1 = 0.25, sigma2 = 0.25, sigma3 = 0.25,
r_wt = 1/12, r_r = 1/10,  r_rr = 1/9,  r_rrr = 1/8,
r_t = 1/7,
eta_wr = test[["eta_wr"]],
eta_rw = test[["eta_rw"]],
eta_rr = test[["eta_rr_rrr"]], eta_rrr = test[["eta_rr_rrr"]],
c1 = test[["c1"]], c2 = test[["c2"]],
c3 = test[["c3"]],
c12 = test[["c12"]], c13 = test[["c13"]],
c23 = test[["c23"]],
c123 = test[["c123"]],
PED = matrix(c(-1, 0.4, 0.4,
0.4, -1, 0.4,
0.4, 0.4, -1), #Be aware of this matrix
nrow = 3, ncol = 3, byrow = T),
eff_tax = matrix(c(0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0),
nrow = 3, ncol = 6, byrow = T),
t_n = 3000, time_between = Inf, rho = 0.05, base_tax = 0.5)
# Model Fit Testing -------------------------------------------------------
out <- agg_func(ode_wrapper(y = init, func = amr, times = seq(0, 10000), parms = parms, approx_sigma)[[1]])
out_m <- melt(out, id.vars = "time", measure.vars = colnames(out)[4:6])
ggplot(out_m, aes(time, value, color = variable)) + geom_line()
init <- c(X = 0.99, Wt = 1-0.99, R1 = 0, R2 = 0, R3 = 0,
R12 = 0, R13 = 0, R23 = 0,
R123 = 0)
test <- c(post_dist[post_dist$gen == "gen_10",][12,])
parms = list(lambda = 1/365*(2), int_round = 1,
beta = test[["beta"]],
sigma1 = 0.25, sigma2 = 0.25, sigma3 = 0.25,
r_wt = 1/12, r_r = 1/10,  r_rr = 1/9,  r_rrr = 1/8,
r_t = 1/7,
eta_wr = test[["eta_wr"]],
eta_rw = test[["eta_rw"]],
eta_rr = test[["eta_rr_rrr"]], eta_rrr = test[["eta_rr_rrr"]],
c1 = test[["c1"]], c2 = test[["c2"]],
c3 = test[["c3"]],
c12 = test[["c12"]], c13 = test[["c13"]],
c23 = test[["c23"]],
c123 = test[["c123"]],
PED = matrix(c(-1, 0.4, 0.4,
0.4, -1, 0.4,
0.4, 0.4, -1), #Be aware of this matrix
nrow = 3, ncol = 3, byrow = T),
eff_tax = matrix(c(0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0),
nrow = 3, ncol = 6, byrow = T),
t_n = 3000, time_between = Inf, rho = 0.05, base_tax = 0.5)
# Model Fit Testing -------------------------------------------------------
out <- agg_func(ode_wrapper(y = init, func = amr, times = seq(0, 10000), parms = parms, approx_sigma)[[1]])
out_m <- melt(out, id.vars = "time", measure.vars = colnames(out)[4:6])
