init <- c(X = 0.99, Wt = 1-0.99, R1 = 0, R2 = 0, R3 = 0,
R12 = 0, R13 = 0, R23 = 0,
R123 = 0)
parms = list(lambda = 1/365*(2), int_round = 1,
beta = 5, sigma1 = 0.25, sigma2 = 0.25, sigma3 = 0.25,
r_wt = 1/12, r_r = 1/10,  r_rr = 1/9,  r_rrr = 1/8,
r_t = 1/7, eta_wr = 0.3, eta_rw = 0.04,
eta_rr = 0.01, eta_rrr = 0.01,
c1 = 0.945, c2 = 0.925, c3 = 0.85,
c12 = 0.845, c13 = 0.825, c23 = 0.75,
c123 = 0.7,
PED = matrix(c(-1, 0.4, 0.4,
0.4, -1, 0.4,
0.4, 0.4, -1), #Be aware of this matrix
nrow = 3, ncol = 3, byrow = T),
eff_tax = matrix(c(0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0),
nrow = 3, ncol = 6, byrow = T),
t_n = 3000, time_between = Inf, rho = 0.05, base_tax = 0.5)
# The Function ------------------------------------------------------------
low_parm <- c(1/3650*(2), #lambda
0, #beta
0, #sigma1
0, #sigma2
0, #sigma3
1/50, #r_wt
1/50, #r_r
1/50, #r_rr
1/50, #r_rrr
1/50, #r_t
0.03, #eta_wr
0.004, #eta_rw
0.001, #eta_rr
0.001, #eta_rrr
0.5, #c1
0.5, #c2
0.5, #c3
0.5, #c12
0.5, #c13
0.5, #c23
0.5, #c123
0, #rho
0) #baseline tax
high_parm <- c(1/36.5*(2), #lambda
10, #beta
1, #sigma1
1, #sigma2
1, #sigma3
1/2, #r_wt
1/2, #r_r
1/2, #r_rr
1/2, #r_rrr
1/2, #r_t
3, #eta_wr
0.4, #eta_rw
0.1, #eta_rr
0.1, #eta_rrr
1, #c1
1, #c2
1, #c3
1, #c12
1, #c13
1, #c23
1, #c123
1, #rho
1) #baseline tax
#Creating the Parm Dataframe
parm_data <- data.frame(t(replicate(10000, runif(23, low_parm, high_parm))))
colnames(parm_data) <- c("lambda", "beta", "sigma1", "sigma2", "sigma3",
"r_wt", "r_r", "r_rr", "r_rrr","r_t",
"eta_wr", "eta_rw", "eta_rr", "eta_rrr",
"c1", "c2", "c3", "c12", "c13", "c23", "c123",
"rho", "base_tax")
for(i in 1:nrow(parm_data)) {
if(sum(parm_data[c("sigma1", "sigma2", "sigma3")][i,]) > 1) {
parm_data[c("sigma1", "sigma2", "sigma3")][i,] <- parm_data[c("sigma1", "sigma2", "sigma3")][i,]/
(sum(parm_data[c("sigma1", "sigma2", "sigma3")][i,]) + runif(1, 0, 1))
}
}
parm_data[c("eta_wr", "eta_rw", "eta_rr", "eta_rrr")] <- t(sapply(1:nrow(parm_data), function(x)
sort(as.numeric(parm_data[c("eta_wr", "eta_rw", "eta_rr", "eta_rrr")][x,]), decreasing = T)))
parm_data[c("r_wt", "r_r", "r_rr", "r_rrr", "r_t")] <- t(sapply(1:nrow(parm_data), function(x)
sort(as.numeric(parm_data[c("r_wt", "r_r", "r_rr", "r_rrr", "r_t")][x,]), decreasing = F)))
parm_data[c("c1", "c2", "c3")] <- t(sapply(1:nrow(parm_data), function(x)
sample(sort(as.numeric(parm_data[c("c1", "c2", "c3", "c12", "c13", "c23", "c123")][x,]), decreasing = T)[1:3],
size = 3, replace = FALSE)))
parm_data[c("c12", "c13", "c23")] <-  t(sapply(1:nrow(parm_data), function(x)
sample(sort(as.numeric(parm_data[c("c1", "c2", "c3", "c12", "c13", "c23", "c123")][x,]), decreasing = T)[4:6],
size = 3, replace = FALSE)))
parm_data["c123"] <- sapply(1:nrow(parm_data), function(x)
sort(as.numeric(parm_data[c("c1", "c2", "c3", "c12", "c13", "c23", "c123")][x,]), decreasing = T)[7])
parm_data_comb <- data.frame(parm_data, t_n = 3000, int_round = 0,
time_between = Inf)
# Creating the Parallel Montonicity Function ------------------------------
mono_func <- function(n, parms_frame, init, amr_ode, usage_fun, multi_int_fun, low_parm, high_parm, agg_func, thresh, ode_wrapper, approx_sigma) {
parms_base = as.list(parms_frame[n,])
parms_base = append(parms_base, parms["PED"])
parms_base = append(parms_base, parms["eff_tax"])
#Run Baseline
run_base <- ode_wrapper(y = init, func = amr_ode, times = seq(0, 10000), parms = parms_base, approx_sigma)[[1]]
run_base_agg <- agg_func(run_base)
values <- tail(run_base_agg, 1)
if(values[4] == 0 & values[5] == 0 & values[6] == 0) {
while(values[4] == 0 & values[5] == 0 & values[6] == 0) {
parms_base[c(1:23)] <- as.list(runif(23, low_parm, high_parm))
if(sum(unlist(parms_base[c("sigma1", "sigma2", "sigma3")])) > 1) {
parms_base[c("sigma1", "sigma2", "sigma3")] <- as.list(unlist(parms_base[c("sigma1", "sigma2", "sigma3")])/
(sum(unlist(parms_base[c("sigma1", "sigma2", "sigma3")])) + runif(1, 0, 1)))
}
parms_base[c("eta_wr", "eta_rw", "eta_rr", "eta_rrr")] <- as.list(sort(as.numeric(parms_base[c("eta_wr", "eta_rw", "eta_rr", "eta_rrr")]), decreasing = T))
parms_base[c("r_wt", "r_r", "r_rr", "r_rrr", "r_t")] <- as.list(sort(as.numeric(parms_base[c("r_wt", "r_r", "r_rr", "r_rrr", "r_t")]), decreasing = F))
parms_base[c("c1", "c2", "c3")] <-
as.list(sample(sort(as.numeric(parms_base[c("c1", "c2", "c3", "c12", "c13", "c23", "c123")]), decreasing = T)[1:3]), size = 3, replace = F)
parms_base[c("c12", "c13", "c23")] <-
as.list(sample(sort(as.numeric(parms_base[c("c1", "c2", "c3", "c12", "c13", "c23", "c123")]), decreasing = T)[4:6]), size = 3, replace = F)
parms_base["c123"] <-
as.list(sort(as.numeric(parms_base[c("c1", "c2", "c3", "c12", "c13", "c23", "c123")]), decreasing = T)[7])
run_base <- ode_wrapper(y = init, func = amr_ode, times = seq(0, 10000), parms = parms_base, approx_sigma)[[1]]
run_base_agg <- agg_func(run_base)
values <- tail(run_base_agg, 1)
}
}
run <- run_base[run_base[,1] > parms_base[["t_n"]],]
run_base_agg <- run_base_agg[run_base_agg[,1] > parms_base[["t_n"]],]
#Identifying the order of the resistances
res_order_vec <- c(names(values[4:6])[which.max(values[4:6])],
names(values[4:6])[setdiff(1:3, c(which.min(values[4:6]), which.max(values[4:6])))],
names(values[4:6])[which.min(values[4:6])])
#Storing info for the integrals
base_tot_inf <- signif(mean(rowSums(run[3:10])), 5)
base_int_res <- signif(mean(rowMeans(run_base_agg[4:6])), 5)
#Need to calculate a different baseline for each scenario for antibiotic usage
store_vec_res <- c()
store_vec_inf <- c()
store_vec_shan <- c()
store_vec_avganti <- c()
for(i in 1:10){
parms = parms_base
if(i == 1) {
parms[["eff_tax"]][,] <- parms[["base_tax"]]
parms[["int_round"]] <- 1
out_run <- ode_wrapper(y = init, func = amr_ode, times = seq(0, 10000), parms = parms, approx_sigma)
out <- out_run[[1]]
parms <- out_run[[2]]
}
if(i >= 2 & i <= 4) {
parms[["eff_tax"]][as.numeric(substr(res_order_vec[i-1], 2, 2)), c(1:6)] <- parms[["base_tax"]]
parms[["int_round"]] <- 1
out_run <- ode_wrapper(y = init, func = amr_ode, times = seq(0, 10000), parms = parms, approx_sigma)
out <- out_run[[1]]
parms <- out_run[[2]]
}
if(i >= 5 & i <= 10) {
diff <- multi_int_fun(i-4, 365*3, parms, init, amr_ode, agg_func, ode_wrapper, approx_sigma)
out <- diff[[1]]
parms <- diff[[2]]
}
data_temp <- out[out[,1] > parms[["t_n"]],]
data_temp_agg <- agg_func(data_temp)
out_vec <- signif(c(mean(rowSums(data_temp[3:10])),
mean(rowMeans(data_temp_agg[4:6]))), 5)
reduc_usage_vec <- mean(usage_fun(parms)[,6])
#Aggregation
out$aggR1 <- out$R1 + out$R12 + out$R13 + out$R123
out$aggR2 <- out$R2 + out$R12 + out$R23 + out$R123
out$aggR3 <- out$R3 + out$R13 + out$R23 + out$R123
#Determine the X% Thresholds that you want to be under
thresholds <- unlist(out[parms[["t_n"]]-1, 11:13]*thresh)
under_thresh <- sweep(out[out[,1] > parms[["t_n"]],][,11:13], 2, thresholds)
#Calculate the number of days you are under said threshold
under_50 <- c(nrow(under_thresh[under_thresh$aggR1 < 0,]),
nrow(under_thresh[under_thresh$aggR2 < 0,]),
nrow(under_thresh[under_thresh$aggR3 < 0,]))
#Find the Sum and make each value proportionate to one another
prop_vec <- sum(under_50) / (10000 - parms[["t_n"]])
prop_vec_shan <- under_50 / sum(under_50)
prop_vec_shan <- prop_vec_shan[prop_vec_shan != 0]
#Store Computation Vectors
store_vec_inf[i] <- (out_vec[1] - base_tot_inf)/reduc_usage_vec
store_vec_res[i] <- (base_int_res - out_vec[2])/reduc_usage_vec
store_vec_shan[i] <- -sum(sapply(1:length(prop_vec_shan), function(x) prop_vec_shan[x]*log(prop_vec_shan[x])))
store_vec_avganti[i] <- prop_vec
}
output <- c(store_vec_inf, store_vec_res, store_vec_shan, store_vec_avganti, parms_base[c(1:28)])
names(output) <- c("flat_inf", "singleHR_inf", "singleMR_inf", "singleLR_inf", "diff1_inf", "diff2_inf", "diff3_inf", "diff4_inf", "diff5_inf", "diff6_inf",
"flat_res", "singleHR_res", "singleMR_res", "singleLR_res", "diff1_res", "diff2_res", "diff3_res", "diff4_res", "diff5_res", "diff6_res",
"flat_shan", "singleHR_shan", "singleMR_shan", "singleLR_shan", "diff1_shan", "diff2_shan", "diff3_shan", "diff4_shan", "diff5_shan", "diff6_shan",
"flat_avganti", "singleHR_avganti", "singleMR_avganti", "singleLR_avganti", "diff1_avganti", "diff2_avganti", "diff3_avganti", "diff4_avganti", "diff5_avganti", "diff6_avganti",
names(parms_base[c(1:28)]))
return(output)
}
mono_func(1,
parms_frame = parm_data_comb,
init = c(X = 0.99, Wt = 1-0.99, R1 = 0, R2 = 0, R3 = 0,
R12 = 0, R13 = 0, R23 = 0,
R123 = 0),
amr_ode = amr,
usage_fun = usage_fun,
multi_int_fun = multi_int_fun,
low_parm = low_parm,
high_parm = high_parm,
agg_func = agg_func,
ode_wrapper = ode_wrapper,
approx_sigma = approx_sigma,
thresh = 0.5)
# Run the Model ----------------------------------------------------------
start_time <- Sys.time()
test <- mclapply(1:10,
FUN = mono_func,
parms_frame = parm_data_comb,
init = c(X = 0.99, Wt = 1-0.99, R1 = 0, R2 = 0, R3 = 0,
R12 = 0, R13 = 0, R23 = 0,
R123 = 0),
amr_ode = amr,
usage_fun = usage_fun,
multi_int_fun = multi_int_fun,
low_parm = low_parm,
high_parm = high_parm,
agg_func = agg_func,
ode_wrapper = ode_wrapper,
approx_sigma = approx_sigma,
thresh = 0.5,
mc.cores = 10)
R.
R.version
install.packages("rstan", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
unlink("~/.R/Makevars")
unlink("~/.Renviron")
install.packages(c('Rcpp', 'RcppArmadillo'))
Rcpp::sourceCpp('/Users/amorgan/Documents/helloworld.cpp')
library("deSolve"); library("ggplot2"); library("reshape2"); library("ggpubr"); library("rootSolve"); library("viridis"); library("cowplot")
rm(list = ls())
setwd("/Users/amorgan/Documents/PostDoc/Diff_Tax_Analysis/Theoretical_Analysis/Interpolat_Diff_Tax/Euler_Run/Model_Output/New_v2")
# Import in Dataset -------------------------------------------------------
win_import_change <- readRDS("MDR_run_two_v1.RDS"); win_import <- win_import_change
win_import[win_import == -1000] <- NA
for(i in seq_along(win_import)) {
win_import[[i]] <- as(win_import[[i]], class(win_import[[i]][[1]]))
}
#Infections
win_inf <- (win_import[,1:9])
plot(density(win_inf[,1]))
#Testing for Normality
shapiro.test(win_inf[,1]) #Data is significantly different from a normal distribution - it is non normal
qqline(win_inf[,1], col = "steelblue", lwd = 2)
#Resistance
win_res <- (win_import[,10:18])
#Testing for Normality
shapiro.test(win_res[,1]) #Data is significantly different from a normal distribution - it is non-normal
qqline(win_res[,1], col = "steelblue", lwd = 2)
#Shannon's
win_shan <- round((win_import[,19:27]), 3)
win_shan[is.na(win_shan)] <- 0
win_shan <- win_shan[rowSums(win_shan[, -1]) > 0, ]
#Average Antibiotics
win_avganti <- round((win_import[,28:36]), 3)
library("deSolve"); library("ggplot2"); library("reshape2"); library("ggpubr"); library("rootSolve"); library("viridis"); library("cowplot")
rm(list = ls())
setwd("/Users/amorgan/Documents/PostDoc/Diff_Tax_Analysis/Theoretical_Analysis/Interpolat_Diff_Tax/Euler_Run/Model_Output/New_v2")
# Import in Dataset -------------------------------------------------------
win_import_change <- readRDS("MDR_run_two_v1.RDS"); win_import <- win_import_change
win_import[win_import == -1000] <- NA
for(i in seq_along(win_import)) {
win_import[[i]] <- as(win_import[[i]], class(win_import[[i]][[1]]))
}
#Infections
win_inf <- (win_import[,1:9])
plot(density(win_inf[,1]))
#Testing for Normality
shapiro.test(win_inf[,1]) #Data is significantly different from a normal distribution - it is non normal
qqline(win_inf[,1], col = "steelblue", lwd = 2)
#Resistance
win_res <- (win_import[,10:18])
#Testing for Normality
shapiro.test(win_res[,1]) #Data is significantly different from a normal distribution - it is non-normal
qqline(win_res[,1], col = "steelblue", lwd = 2)
#Shannon's
win_shan <- round((win_import[,19:27]), 3)
win_shan[is.na(win_shan)] <- 0
win_shan <- win_shan[rowSums(win_shan[, -1]) > 0, ]
#Average Antibiotics
win_avganti <- round((win_import[,28:36]), 3)
# Resistance --------------------------------------------------------------
win_res <- (win_import[,10:18])
inc_res <- win_res[,c(1:9)]
m_res <- melt(inc_res, measure.vars = colnames(inc_res))
prop_vec <- data.frame("intervention" = unique(m_res$variable),
"prop_inc" = NA,
"95_quant" = NA )
m_win_import_change <- melt(win_import_change, measure.vars = colnames(win_import_change))
for(i in 1:9) {
prop_1000 <- win_import_change[,i+9]
prop_vec[i,2] <- length(prop_1000[prop_1000 == -1000])/sum(!is.na(prop_1000))
}
p <- ggplot(m_res, aes(x=factor(variable), y=value)) + geom_boxplot()
prop_vec[,3] <- ggplot_build(p)$data[[1]]$ymax
#win_res[is.na(win_res)] <- 0
win_res_trans <- t(apply(win_res, 1, function(x) {
val = max(x, na.rm = T)
x[x != val] <- 0
x[x == val] <- 1
return(x)}
))
prop_win_res <- data.frame("Resistance" = colSums(win_res_trans, na.rm = T)/nrow(win_res_trans),
"Interventions" = as.factor(c("FT", "ST (HR)",
"ST (LR)",
"DT (1Rd)", "DT (2Rd)",
"DT (3Rd)", "DT (4Rd)",
"DT (5Rd)", "DT (6Rd)")))
prop_win_res$Interventions <- factor(prop_win_res$Interventions, levels = c(prop_win_res$Interventions))
prop_win_res$Color <- "black"
prop_win_res[prop_win_res$Resistance == max(prop_win_res$Resistance),3] <- "white"
#Win Heat Map
win_res_p <- ggplot(prop_win_res, aes(Interventions, "")) + theme_bw() +
geom_tile(aes(fill = Resistance)) +
geom_text(aes(label=Resistance, color = Interventions)) +
scale_colour_manual(values=prop_win_res$Color) +
scale_fill_distiller(palette ="Blues", direction = 1) +
scale_x_discrete(name = "", expand = c(0, 0))  +
scale_y_discrete(name = "", expand = c(0, 0)) +
guides(fill = guide_colorbar(title = "Probability that Intervention Wins",
title.position = "left", title.vjust = 1,
# draw border around the legend
frame.colour = "black",
barwidth = 15,
barheight = 1), color = "none") +
theme(strip.background = element_blank(), axis.text=element_text(size=11),
strip.text = element_blank(), legend.position="bottom",
axis.text.x = element_text(angle = 0, hjust=0.5), axis.text.y = element_blank(), axis.ticks.y = element_blank(),
plot.margin = unit(c(0,1,0,1.75), "cm"))
#Box Plot
box_res <- ggplot(m_res, aes(x=variable, y=value, fill = variable, alpha = variable)) + coord_cartesian(ylim=c(-1, 1.3)) +
geom_boxplot(outlier.shape = NA, show.legend = FALSE, fill = "red") + theme_bw() + labs(y = "Decrease in Resistance (%)", x = "") +
scale_alpha_manual(values=  prop_vec$prop_inc) +
theme(legend.position= "bottom", legend.text=element_text(size=11), legend.title =element_text(size=12), axis.text=element_text(size=11),
axis.title.y=element_text(size=12), axis.title.x= element_blank(), plot.margin = unit(c(0.3,1,0,1), "cm"),
legend.spacing.x = unit(0.3, 'cm'), axis.text.x = element_blank(), axis.ticks.x = element_blank()) +
scale_x_discrete(labels= c("FT", "ST (HR)",
"ST (LR)",
"DT (1Rd)", "DT (2Rd)",
"DT (3Rd)", "DT (4Rd)",
"DT (5Rd)", "DT (6Rd)"))
comb_res <- ggarrange(box_res, win_res_p, ncol =1, nrow= 2, heights = c(1, 0.6), align = "v")
# Absolute Differences ----------------------------------------------------
#Infections Distribution
inc_inf <- win_inf[,c(1:9)]
inc_inf <- inc_inf[apply(inc_inf, 1, function(x) all(is.finite(x))), ]
keep <- Reduce(`&`, lapply(inc_inf, function(x) x >= quantile(x, .025)
& x <= quantile(x, .975)))
inc_inf <- inc_inf[keep,]
m_inf <- melt(inc_inf, measure.vars = colnames(inc_inf))
#Infections Wins
win_inf[is.na(win_inf)] <- 0
win_inf_trans <- t(apply(win_inf, 1, function(x) {
val = min(x)
x[x != val] <- 0
x[x == val] <- 1
return(x)}
))
prop_win_inf <- data.frame("Infections" = colSums(win_inf_trans)/nrow(win_inf_trans),
"Interventions" = as.factor(c("FT", "ST (HR)",
"ST (LR)",
"DT (1Rd)", "DT (2Rd)",
"DT (3Rd)", "DT (4Rd)",
"DT (5Rd)", "DT (6Rd)")))
prop_win_inf$Interventions <- factor(prop_win_inf$Interventions, levels = c(prop_win_inf$Interventions))
prop_win_inf$Color <- "black"
prop_win_inf[prop_win_inf$Infections == max(prop_win_inf$Infections),3] <- "white"
#Win Heat Map
win_inf_p <- ggplot(prop_win_inf, aes(Interventions, "")) + theme_bw() +
geom_tile(aes(fill = Infections)) +
geom_text(aes(label=Infections, color = Interventions)) +
scale_colour_manual(values=prop_win_inf$Color) +
scale_fill_distiller(palette ="Blues", direction = 1) +
scale_x_discrete(name = "", expand = c(0, 0))  +
scale_y_discrete(name = "", expand = c(0, 0)) +
guides(fill = guide_colorbar(title = "Probability that Intervention Wins",
title.position = "left", title.vjust = 1,
# draw border around the legend
frame.colour = "black",
barwidth = 15,
barheight = 1), color = "none") +
theme(strip.background = element_blank(), axis.text=element_text(size=11),
strip.text = element_blank(), legend.position="bottom",
axis.text.x = element_text(angle = 0, hjust=0.5), axis.text.y = element_blank(), axis.ticks.y = element_blank(),
plot.margin = unit(c(0,1,0,1.75), "cm"))
#Box Plot
box_inf <- ggplot(m_inf, aes(x=variable, y=value, fill = variable, alpha = variable)) + coord_cartesian(ylim=c(-0.125, 0.5)) +
scale_alpha_manual(values=  prop_vec$prop_inc) +
geom_boxplot(outlier.shape = NA, show.legend = FALSE, fill = "red") + theme_bw() + labs(y = "Increase in Infections (%)", x = "") +
theme(legend.position= "bottom", legend.text=element_text(size=11), legend.title =element_text(size=12), axis.text=element_text(size=11),
axis.title.y=element_text(size=12), axis.title.x= element_blank(), plot.margin = unit(c(0.3,1,0,1), "cm"),
legend.spacing.x = unit(0.3, 'cm'), axis.text.x = element_blank(), axis.ticks.x = element_blank()) +
scale_x_discrete(labels= c("FT", "ST (HR)",
"ST (LR)",
"DT (1Rd)", "DT (2Rd)",
"DT (3Rd)", "DT (4Rd)",
"DT (5Rd)", "DT (6Rd)"))
comb_inf <- ggarrange(box_inf, win_inf_p, ncol =1, nrow= 2, heights = c(1, 0.6), align = "v")
# Average Antibiontics Available ------------------------------------------
inc_avganti <- win_avganti[,c(1:9)]
m_avganti <- melt(inc_avganti, measure.vars = colnames(inc_avganti))
win_avganti[is.na(win_avganti)] <- 0
win_avganti <- win_avganti[rowSums(win_avganti[, -1]) > 0, ]
win_avganti_trans <- t(apply(win_avganti, 1, function(x) {
val = max(x)
x[is.na(x)] <- 0
x[x != val] <- 0
x[x == val] <- 1
return(x)}
))
prop_win_avganti <- data.frame("Average_Anti" = round(colSums(win_avganti_trans)/nrow(win_avganti_trans),3),
"Interventions" = as.factor(c("FT", "ST (HR)",
"ST (LR)",
"DT (1Rd)", "DT (2Rd)",
"DT (3Rd)", "DT (4Rd)",
"DT (5Rd)", "DT (6Rd)")))
prop_win_avganti$Interventions <- factor(prop_win_avganti$Interventions, levels = c(prop_win_avganti$Interventions))
prop_win_avganti$Color <- "black"
prop_win_avganti[prop_win_avganti$Average_Anti == max(prop_win_avganti$Average_Anti),3] <- "white"
#Win Heat Map
win_avganti_p <- ggplot(prop_win_avganti, aes(Interventions, "")) + theme_bw() +
geom_tile(aes(fill = Average_Anti)) +
geom_text(aes(label=Average_Anti, color = Interventions)) +
scale_colour_manual(values=prop_win_avganti$Color) +
scale_fill_distiller(palette ="Blues", direction = 1) +
scale_x_discrete(name = "", expand = c(0, 0))  +
scale_y_discrete(name = "", expand = c(0, 0)) +
guides(fill = guide_colorbar(title = "Probability that Intervention Wins",
title.position = "left", title.vjust = 1,
# draw border around the legend
frame.colour = "black",
barwidth = 15,
barheight = 1), color = "none") +
theme(strip.background = element_blank(), axis.text=element_text(size=11),
strip.text = element_blank(), legend.position="bottom",
axis.text.x = element_text(angle = 0, hjust=0.5), axis.text.y = element_blank(), axis.ticks.y = element_blank(),
plot.margin = unit(c(0,1,0,1.35), "cm"))
#Box Plot
box_avganti <- ggplot(m_avganti, aes(x=variable, y=value, fill = variable, alpha = variable)) + coord_cartesian(ylim=c(-0.001, 3)) +
geom_boxplot(outlier.shape = NA, show.legend = FALSE, fill = "red") + theme_bw() + labs(y = "Average Antibiotics Available", x = "") +
scale_alpha_manual(values=  prop_vec$prop_inc) +
theme(legend.position= "bottom", legend.text=element_text(size=11), legend.title =element_text(size=12), axis.text=element_text(size=11),
axis.title.y=element_text(size=12), axis.title.x= element_blank(), plot.margin = unit(c(0.3,1,0,2), "cm"),
legend.spacing.x = unit(0.3, 'cm'), axis.text.x = element_blank(), axis.ticks.x = element_blank()) +
scale_x_discrete(labels= c("FT", "ST (HR)",
"ST (LR)",
"DT (1Rd)", "DT (2Rd)",
"DT (3Rd)", "DT (4Rd)",
"DT (5Rd)", "DT (6Rd)"))
comb_avg_anti <- ggarrange(box_avganti, win_avganti_p, ncol =1, nrow= 2, heights = c(1, 0.6), align = "v")
# Shannon's ---------------------------------------------------------------
diff_shan <- win_shan[,c(1:9)]
m_shan <- melt(diff_shan, measure.vars = colnames(diff_shan))
win_shan[is.na(win_shan)] <- 0
win_shan <- win_shan[rowSums(win_shan[, -1]) > 0, ]
win_shan_trans <- t(apply(win_shan, 1, function(x) {
val = max(x)
x[is.na(x)] <- 0
x[x != val] <- 0
x[x == val] <- 1
return(x)}
))
prop_win_shan <- data.frame("Shannon_Index" = round(colSums(win_shan_trans)/nrow(win_shan_trans),3),
"Interventions" = as.factor(c("FT", "ST (HR)",
"ST (LR)",
"DT (1Rd)", "DT (2Rd)",
"DT (3Rd)", "DT (4Rd)",
"DT (5Rd)", "DT (6Rd)")))
prop_win_shan$Interventions <- factor(prop_win_shan$Interventions, levels = c(prop_win_shan$Interventions))
prop_win_shan$Color <- "black"
prop_win_shan[prop_win_shan$Shannon_Index == max(prop_win_shan$Shannon_Index),3] <- "white"
#Win Heat Map
win_shan_p <- ggplot(prop_win_shan, aes(Interventions, "")) + theme_bw() +
geom_tile(aes(fill = Shannon_Index)) +
geom_text(aes(label=Shannon_Index, color = Interventions)) +
scale_colour_manual(values=prop_win_shan$Color) +
scale_fill_distiller(palette ="Blues", direction = 1) +
scale_x_discrete(name = "", expand = c(0, 0))  +
scale_y_discrete(name = "", expand = c(0, 0)) +
guides(fill = guide_colorbar(title = "Probability that Intervention Wins",
title.position = "left", title.vjust = 1,
# draw border around the legend
frame.colour = "black",
barwidth = 15,
barheight = 1), color = "none") +
theme(strip.background = element_blank(), axis.text=element_text(size=11),
strip.text = element_blank(), legend.position="bottom",
axis.text.x = element_text(angle = 0, hjust=0.5), axis.text.y = element_blank(), axis.ticks.y = element_blank(),
plot.margin = unit(c(0,1,0,1.8), "cm"))
#Box Plot
box_shan <- ggplot(m_shan, aes(x=variable, y=value, fill = variable, alpha = variable)) +
geom_boxplot(outlier.shape = NA, show.legend = FALSE, fill = "red") + theme_bw() + labs(y = "Shannon's Index", x = "") +
scale_y_continuous(expand = c(0,0)) +
scale_alpha_manual(values=  prop_vec$prop_inc) +
theme(legend.position= "bottom", legend.text=element_text(size=11), legend.title =element_text(size=12), axis.text=element_text(size=11),
axis.title.y=element_text(size=12), axis.title.x= element_blank(), plot.margin = unit(c(0.3,1,0,1), "cm"),
legend.spacing.x = unit(0.3, 'cm'), axis.text.x = element_blank(), axis.ticks.x = element_blank()) +
scale_x_discrete(labels= c("FT", "ST (HR)",
"ST (LR)",
"DT (1Rd)", "DT (2Rd)",
"DT (3Rd)", "DT (4Rd)",
"DT (5Rd)", "DT (6Rd)"))
comb_shan <- ggarrange(box_shan, win_shan_p, ncol =1, nrow= 2, heights = c(1, 0.6), align = "v")
# Combine the Plots Together ----------------------------------------------
test <- ggarrange(comb_res, comb_inf,
comb_avg_anti, labels= c("A", "B", "C"), font.label=list(color="black",size=20) ,nrow = 3, ncol = 1, align="hv",
heights = c(0.1, 0.1, 0.1), common.legend = T)
test
win_shan_p
win_avganti_p
