testrun_flat <- ode_wrapper(y = init, func = amr, times = seq(0, 10000), parms = parms1, approx_sigma)[[1]]
test_run_agg <- agg_func(testrun_flat)
test_run_agg$AverageRes <- rowMeans(testrun_flat[,4:6])
test_run_agg$TotInf <- rowSums(testrun_flat[,3:10])
parms1 <- parms; parms1[["eff_tax"]][,] <- 0.5; parms1[["int_round"]] <- 1
testrun_flat <- ode_wrapper(y = init, func = amr, times = seq(0, 10000), parms = parms1, approx_sigma)[[1]]
test_plot_flat <- melt(testrun_flat, id.vars = "time", measure.vars = colnames(testrun_flat)[4:6])
ggplot(test_plot_flat, aes(time, value, color = variable)) + geom_line() + theme_bw()
# Intervention Scenarios --------------------------------------------------
#Flat Tax
parms1 <- parms; parms1[["eff_tax"]][,] <- 0.5; parms1[["int_round"]] <- 1
testrun_flat <- list(ode_wrapper(y = init, func = amr, times = seq(0, 10000), parms = parms1, approx_sigma)[[1]])
#Single Tax
single_list <- list()
for(i in 1:3) {
parms1 <- parms
single_list[[i]] <- single_tax(i, 0.5, parms1, init, amr, agg_func, ode_wrapper, approx_sigma)[[1]]
}
#Diff Tax
diff_tax_list <- list()
for(i in 1:6) {
diff_tax_list[[i]] <- multi_int_fun(i, 365*3, parms, init, amr, agg_func, ode_wrapper, approx_sigma)[[1]]
}
# Plotting the Scenarios --------------------------------------------------
#Create a combined list of all the scenarios
list_scen <- unlist(list(testrun_flat, single_list, diff_tax_list), recursive = FALSE)
melt_data <- list()
#Melt each one
for(i in 1:length(list_scen)) {
data_agg <- agg_func(list_scen[[i]])
colnames(data_agg)[4:6] <- c("High Res (HR)", "Medium Res (MR)", "Low Res (LR)")
melt_data[[i]] <- data.frame(melt(data_agg, id.vars = "time", measure.vars = colnames(data_agg)[4:6]),
"scen" = c("flat", "single1", "single2", "single3",
"diff1", "diff2", "diff3", "diff4", "diff5", "diff6")[i])
}
p_data <- list()
#Plotting Loop
for(i in 1:length(melt_data)) {
data <- melt_data[[i]]
p_data[[i]] <- ggplot(data, aes(time, value, color = variable)) + geom_line() + theme_bw() + theme(legend.position = "bottom") +
labs(x = "Time", y = "Prevalence", title = c("Flat Tax",
"Single Tax (HR)","Single Tax (MR)","Single Tax (LR)",
"Diff Tax (1 Rd)", "Diff Tax (2 Rd)", "Diff Tax (3 Rd)",
"Diff Tax (4 Rd)", "Diff Tax (5 Rd)", "Diff Tax (6 Rd)")[i], color = "") +
theme(legend.text = element_text(size=11),
axis.text=element_text(size=10), axis.title =element_text(size=9), title =element_text(size=9, face="bold"))
}
ggarrange(p_data[[1]], "", "",
p_data[[2]], p_data[[3]],p_data[[4]],
p_data[[5]], p_data[[6]], p_data[[7]],
p_data[[8]], p_data[[9]], p_data[[10]],
labels = c("A", "", "",
"B", "", "",
"C", "", "",
"", "", ""), hjust = -.1,  nrow = 4, ncol = 3, common.legend = T, legend = "bottom")
# Figure ------------------------------------------------------------------
figure_run <- agg_func(multi_int_fun(6, 365*3, parms, init, amr, agg_func, ode_wrapper, approx_sigma)[[1]])
m_sigma <- melt(figure_run, id.vars = "time", measure.vars = colnames(figure_run)[4:6])
ggplot(m_sigma, aes(time, value, color = variable)) + geom_line() + theme_minimal() + theme(legend.position = "bottom") +
labs(x = "Time", y = "Prevalence", color = "Antibiotic Class") + scale_y_continuous(limits = c(0,0.5), expand = c(0, 0)) +
scale_x_continuous(limits = c(0,3000) , expand = c(0.04, 0.5)) +
theme(axis.text=element_text(size=11),axis.title =element_text(size=12))
ggplot(m_sigma, aes(time, value, color = variable)) + geom_line() + theme_minimal() + theme(legend.position = "bottom") +
labs(x = "Time", y = "Prevalence", color = "Antibiotic Class") + scale_y_continuous(name = "", limits = c(0,0.5), expand = c(0, 0)) +
scale_x_continuous(limits = c(3001,3001 + 365*3) , expand = c(0, 0.5)) +
theme(axis.text=element_text(size=11), axis.title =element_text(size=12), axis.text.y = element_blank())
library("deSolve"); library("ggplot2"); library("reshape2"); library("ggpubr")
rm(list=ls())
setwd("/Users/amorgan/Documents/PostDoc/Diff_Tax_Analysis/Theoretical_Analysis/Interpolat_Diff_Tax/Model_Fit/Model_Output")
# ODEs --------------------------------------------------------------------
amr <- function(t, y, parms, sigma_use1, sigma_use2, sigma_use3) {
with(as.list(c(y, parms)), {
#Specify the time-varying functions
sigma_use1 <- sigma_func1(t)
sigma_use2 <- sigma_func2(t)
sigma_use3 <- sigma_func3(t)
#ODES Below
dX = lambda - lambda*X - beta*X*(Wt + R1*c1 + R2*c2 + R3*c3 + R12*c12 + R13*c13 + R23*c23 + R123*c123) +
r_wt*Wt*(1 - (sigma_use1 + sigma_use2 + sigma_use3)) + r_r*R1*(1-(sigma_use2 + sigma_use3)) + r_r*R2*(1-(sigma_use1 + sigma_use3)) + r_r*R3*(1-(sigma_use1 + sigma_use2)) +
r_rr*R12*(1-sigma_use3) + r_rr*R13*(1-sigma_use2) + r_rr*R23*(1-sigma_use1) +
r_rrr*R123 +
r_t*(1-rho)*(Wt*(sigma_use1 + sigma_use2 + sigma_use3) + R1*(sigma_use2 + sigma_use3) +
R2*(sigma_use1 + sigma_use3) + R3*(sigma_use1 + sigma_use2) +
R12*sigma_use3 + R13*sigma_use2 + R23*sigma_use1)
dWt = - lambda*Wt + beta*X*Wt - r_wt*Wt*(1 - (sigma_use1 + sigma_use2 + sigma_use3)) - r_t*Wt*(1-rho)*(sigma_use1 + sigma_use2 + sigma_use3) +
eta_rw*(R1 + R2 + R3 + R12 + R13 + R23 + R123)*(1 - (sigma_use1 + sigma_use2 + sigma_use3)) -
eta_wr*Wt*rho*(sigma_use1 + sigma_use2 + sigma_use3)
dR1 = - lambda*R1 + beta*X*R1*c1 - r_t*(1-rho)*(sigma_use2 + sigma_use3)*R1 - r_r*(1-(sigma_use2 + sigma_use3))*R1 - eta_rr*R1*rho*sigma_use2 -
eta_rr*R1*rho*sigma_use3 - eta_rw*R1*(1 - (sigma_use1 + sigma_use2 + sigma_use3)) + eta_wr*rho*Wt*sigma_use1
dR2 = - lambda*R2 + beta*X*R2*c2 - r_t*(1-rho)*(sigma_use1 + sigma_use3)*R2 - r_r*(1-(sigma_use1 + sigma_use3))*R2 - eta_rr*R2*rho*sigma_use1 -
eta_rr*R2*rho*sigma_use3 - eta_rw*R2*(1 - (sigma_use1 + sigma_use2 + sigma_use3)) + eta_wr*rho*Wt*sigma_use2
dR3 = - lambda*R3 + beta*X*R3*c3 - r_t*(1-rho)*(sigma_use1 + sigma_use2)*R3 - r_r*(1-(sigma_use1 + sigma_use2))*R3 - eta_rr*R3*rho*sigma_use1 -
eta_rr*R3*rho*sigma_use2 - eta_rw*R3*(1 - (sigma_use1 + sigma_use2 + sigma_use3)) + eta_wr*rho*Wt*sigma_use3
dR12 = - lambda*R12 + beta*X*R12*c12 - r_t*(1-rho)*sigma_use3*R12 - r_rr*(1-sigma_use3)*R12 - eta_rrr*R12*rho*sigma_use3 -
eta_rw*R12*(1 - (sigma_use1 + sigma_use2 + sigma_use3)) + eta_rr*R1*rho*sigma_use2 + eta_rr*R2*rho*sigma_use1
dR13 = - lambda*R13 + beta*X*R13*c13 - r_t*(1-rho)*sigma_use2*R13 - r_rr*(1-sigma_use2)*R13 - eta_rrr*R13*rho*sigma_use2 -
eta_rw*R13*(1 - (sigma_use1 + sigma_use2 + sigma_use3)) + eta_rr*R1*rho*sigma_use3 + eta_rr*R3*rho*sigma_use1
dR23 = - lambda*R23 + beta*X*R23*c23 - r_t*(1-rho)*sigma_use1*R23 - r_rr*(1-sigma_use1)*R23 - eta_rrr*R23*rho*sigma_use1 -
eta_rw*R23*(1 - (sigma_use1 + sigma_use2 + sigma_use3)) + eta_rr*R2*rho*sigma_use3 + eta_rr*R3*rho*sigma_use2
dR123 = - lambda*R123 + beta*X*R123*c123 - r_rrr*R123 - eta_rw*R123*(1 - (sigma_use1 + sigma_use2 + sigma_use3)) +
eta_rrr*rho*(sigma_use3*R12 + sigma_use2*R13 + sigma_use1*R23)
return(list(c(dX,dWt,
dR1,dR2,dR3,
dR12,dR13,dR23,
dR123)))
})
}
# Extract Sigmas for the ApproxFun Function -------------------------------
approx_sigma <- function(sigma_mat){
usage = data.frame("time" = seq(0,10000),
"PopUsage1" = c(rep(sigma_mat[1,1], 3000),
rep(sigma_mat[1,2], 365*3), rep(sigma_mat[1,3], 365*3), rep(sigma_mat[1,4], 365*3),
rep(sigma_mat[1,5], 365*3), rep(sigma_mat[1,6], 365*3), rep(sigma_mat[1,7], 10001 - (3000 + (365*3)*5))),
"PopUsage2" = c(rep(sigma_mat[2,1], 3000),
rep(sigma_mat[2,2], 365*3), rep(sigma_mat[2,3], 365*3), rep(sigma_mat[2,4], 365*3),
rep(sigma_mat[2,5], 365*3), rep(sigma_mat[2,6], 365*3), rep(sigma_mat[2,7], 10001 - (3000 + (365*3)*5))),
"PopUsage3" = c(rep(sigma_mat[3,1], 3000),
rep(sigma_mat[3,2], 365*3), rep(sigma_mat[3,3], 365*3), rep(sigma_mat[3,4], 365*3),
rep(sigma_mat[3,5], 365*3), rep(sigma_mat[3,6], 365*3), rep(sigma_mat[3,7], 10001 - (3000 + (365*3)*5))))
return(usage)
}
# ODE Wrapper Function ----------------------------------------------------
ode_wrapper <- function(times, y, parms, func, approx_sigma) {
sigma_mat = matrix(c(rep(parms[["sigma1"]], 7),
rep(parms[["sigma2"]], 7),
rep(parms[["sigma3"]], 7)),
nrow = 3, ncol = 7, byrow = T)
eff_tax <- parms[["eff_tax"]]; PED <- parms[["PED"]]
if(parms[["int_round"]] > 0 ) {
for(i in 1:parms[["int_round"]]) {
stor_sigma <- sigma_mat[,i]
sigma_mat[,(i+1):7] = c(stor_sigma[1]*(1 + ((eff_tax[1,i]*PED[1,1]) + (eff_tax[2,i]*PED[2,1]) + (eff_tax[3,i]*PED[3,1]))),
stor_sigma[2]*(1 + ((eff_tax[1,i]*PED[1,2]) + (eff_tax[2,i]*PED[2,2]) + (eff_tax[3,i]*PED[3,2]))),
stor_sigma[3]*(1 + ((eff_tax[1,i]*PED[1,3]) + (eff_tax[2,i]*PED[2,3]) + (eff_tax[3,i]*PED[3,3]))))
sigma_mat[,(i+1):7][sigma_mat[,(i+1)] < 0.01] <- 0.01
if(colSums(sigma_mat)[i+1] > 1) {
sigma_mat[,(i+1):7] <- sigma_mat[,i+1]/(sum(sigma_mat[,i+1])+0.01)
}
}
}
parms[["sigma_mat"]] <- sigma_mat
sigma_data <- approx_sigma(sigma_mat)
sigma_func1 <<- approxfun(sigma_data[,c(1,2)], rule = 2)
sigma_func2 <<- approxfun(sigma_data[,c(1,3)], rule = 2)
sigma_func3 <<- approxfun(sigma_data[,c(1,4)], rule = 2)
#Run the model
out <- data.frame(ode(y = init, func = func, times = times, parms = parms))
n_data <- ncol(out)-1
timing <- t(sapply(1:n_data, function(x)  out[max(which(!is.na(out[,x+1]))),]))
if(timing[1,1] != tail(times,1)) {
for(i in 1:n_data){
out[seq(timing[[1]]+2,tail(times,1)+1),i+1] <- timing[i,i+1]
}
}
out[out < 1e-10] <- 0
return(list(out, parms))
}
# Function to Aggregate Resistance ----------------------------------------
agg_func <- function(data) {
agg_data <- data.frame("time" = data$time,
"Susc" = data$X,
"WT" = data$Wt,
"R1" = data$R1 + data$R12 + data$R13 + data$R123,
"R2" = data$R2 + data$R12 + data$R23 + data$R123,
"R3" = data$R3 + data$R13 + data$R23 + data$R123)
return(agg_data)
}
# Single Taxation Function ------------------------------------------------
single_tax <- function(res_order, tax, parms, init, func, agg_func, ode_wrapper, approx_sigma) {
#First Run
parms[["base_tax"]] <- tax
run_1rd <- agg_func(ode_wrapper(y = init, func = func, times = seq(0, parms[["t_n"]]), parms = parms, approx_sigma)[[1]])
values_1rd <- tail(run_1rd, 1)[4:6]
res_order_vec <- c(names(values_1rd)[which.max(values_1rd)],
names(values_1rd)[setdiff(1:3, c(which.min(values_1rd), which.max(values_1rd)))],
names(values_1rd)[which.min(values_1rd)])[res_order]
parms[["eff_tax"]][as.numeric(substr(res_order_vec, 2, 2)), c(1:6)] <- as.numeric(parms[["base_tax"]])
parms[["int_round"]] <- 1
#Real Model Run
run_real <- ode_wrapper(y = init, func = func, times = seq(0, 10000), parms = parms, approx_sigma)
return(run_real)
}
# Dual Model --------------------------------------------------------------
multi_int_fun <- function(int_gen, time_between, parms, init, func, agg_func, ode_wrapper, approx_sigma){
parms["time_between"] <- time_between
#First Run
run_1rd <- agg_func(ode_wrapper(y = init, func = func, times = seq(0, parms[["t_n"]]), parms = parms, approx_sigma)[[1]])
values_1rd <- tail(run_1rd, 1)[4:6]
low_char_1rd <- names(values_1rd)[which.min(values_1rd)]
high_char_1rd <- names(values_1rd)[which.max(values_1rd)]
med_char_1rd <- names(values_1rd)[setdiff(1:3, c(which.min(values_1rd), which.max(values_1rd)))]
parms[["eff_tax"]][as.numeric(substr(low_char_1rd, 2, 2)), c(1:6)] <- as.numeric((parms[["base_tax"]]*(values_1rd[low_char_1rd]/values_1rd[med_char_1rd])))
parms[["eff_tax"]][as.numeric(substr(high_char_1rd, 2, 2)), c(1:6)] <- as.numeric((parms[["base_tax"]]*(values_1rd[high_char_1rd]/values_1rd[med_char_1rd])))
parms[["eff_tax"]][as.numeric(substr(med_char_1rd, 2, 2)), c(1:6)] <- as.numeric((parms[["base_tax"]]*(values_1rd[med_char_1rd]/values_1rd[med_char_1rd])))
#First Round of Diff Taxation
parms[["int_round"]] <- 1
if(int_gen > 1) {
#All Rounds Above 1
for(i in 2:int_gen) {
parms[["int_round"]] <- i-1
run <- agg_func(ode_wrapper(y = init, func = func, times = seq(0, parms[["t_n"]] + (parms[["time_between"]]*(i-1))), parms = parms, approx_sigma)[[1]])
values <- tail(run, 1)[4:6]
if(values[1] == 0 & values[2] == 0 & values[3] == 0) {
parms[["eff_tax"]][,i] <- 0
} else {
low_char <- names(values)[which.min(values)]
high_char <- names(values)[which.max(values)]
med_char <- names(values)[setdiff(1:3, c(which.min(values), which.max(values)))]
parms[["eff_tax"]][as.numeric(substr(low_char, 2, 2)), c((i):6)] <- (((1+as.numeric((parms[["base_tax"]]*(tail(run[low_char],1)/values_1rd[med_char_1rd]))))-
(1+parms[["eff_tax"]][as.numeric(substr(low_char, 2, 2)), (i-1)]))/
(1+parms[["eff_tax"]][as.numeric(substr(low_char, 2, 2)), (i-1)]))
parms[["eff_tax"]][as.numeric(substr(high_char, 2, 2)), c((i):6)] <- (((1+as.numeric((parms[["base_tax"]]*(tail(run[high_char],1)/values_1rd[med_char_1rd]))))-
(1+parms[["eff_tax"]][as.numeric(substr(high_char, 2, 2)), (i-1)]))/
(1+parms[["eff_tax"]][as.numeric(substr(high_char, 2, 2)), (i-1)]))
parms[["eff_tax"]][as.numeric(substr(med_char, 2, 2)), c((i):6)] <- (((1+as.numeric((parms[["base_tax"]]*(tail(run[med_char],1)/values_1rd[med_char_1rd]))))-
(1+parms[["eff_tax"]][as.numeric(substr(med_char, 2, 2)), (i-1)]))/
(1+parms[["eff_tax"]][as.numeric(substr(med_char, 2, 2)), (i-1)]))
}
parms[["int_round"]] <- i
}
}
out_run <- ode_wrapper(y = init, func = func, times = seq(0, 10000), parms = parms, approx_sigma)
return(out_run)
}
# Baseline Parms ----------------------------------------------------------
post_dist_names <- grep("ABC_v1_",
list.files("/Users/amorgan/Documents/PostDoc/Diff_Tax_Analysis/Theoretical_Analysis/Interpolat_Diff_Tax/Model_Fit/Model_Output"), value = TRUE)
post_dist <- lapply(post_dist_names, read.csv)
post_dist <- mapply(cbind, post_dist, "gen" = sapply(1:length(post_dist), function(x) paste0("gen_", x)),
SIMPLIFY=F)
post_dist <- do.call("rbind", post_dist)
maps_est <- colMeans(post_dist[post_dist$gen == tail(unique(post_dist$gen),1),][,1:11])
init <- c(X = 0.99, Wt = 1-0.99, R1 = 0, R2 = 0, R3 = 0,
R12 = 0, R13 = 0, R23 = 0,
R123 = 0)
parms = list(lambda = 1/365*(2), int_round = 1,
beta = maps_est["beta"],
sigma1 = 0.25, sigma2 = 0.25, sigma3 = 0.25,
r_wt = 1/12, r_r = 1/10,  r_rr = 1/9,  r_rrr = 1/8,
r_t = 1/7,
eta_wr = maps_est["eta_wr"],
eta_rw = maps_est["eta_rw"],
eta_rr = maps_est["eta_rr_rrr"], eta_rrr = maps_est["eta_rr_rrr"],
c1 = maps_est["c1"], c2 = maps_est["c2"],
c3 = maps_est["c3"],
c12 = maps_est["c12"], c13 = maps_est["c13"],
c23 = maps_est["c23"],
c123 = maps_est["c123"],
PED = matrix(c(-1, 0.4, 0.4,
0.4, -1, 0.4,
0.4, 0.4, -1), #Be aware of this matrix
nrow = 3, ncol = 3, byrow = T),
eff_tax = matrix(c(0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0),
nrow = 3, ncol = 6, byrow = T),
t_n = 3000, time_between = Inf, rho = 0.05, base_tax = 0.5)
# Baseline Model ----------------------------------------------------------
parms1 <- parms
testrun_flat <- ode_wrapper(y = init, func = amr, times = seq(0, 10000), parms = parms1, approx_sigma)[[1]]
test_run_agg <- agg_func(testrun_flat)
test_run_agg$AverageRes <- rowMeans(testrun_flat[,4:6])
test_run_agg$TotInf <- rowSums(testrun_flat[,3:10])
parms1 <- parms; parms1[["eff_tax"]][,] <- 0.5; parms1[["int_round"]] <- 1
testrun_flat <- ode_wrapper(y = init, func = amr, times = seq(0, 10000), parms = parms1, approx_sigma)[[1]]
test_plot_flat <- melt(testrun_flat, id.vars = "time", measure.vars = colnames(testrun_flat)[4:6])
ggplot(test_plot_flat, aes(time, value, color = variable)) + geom_line() + theme_bw()
# Intervention Scenarios --------------------------------------------------
#Flat Tax
parms1 <- parms; parms1[["eff_tax"]][,] <- 0.5; parms1[["int_round"]] <- 1
testrun_flat <- list(ode_wrapper(y = init, func = amr, times = seq(0, 10000), parms = parms1, approx_sigma)[[1]])
#Single Tax
single_list <- list()
for(i in 1:3) {
parms1 <- parms
single_list[[i]] <- single_tax(i, 0.5, parms1, init, amr, agg_func, ode_wrapper, approx_sigma)[[1]]
}
#Diff Tax
diff_tax_list <- list()
for(i in 1:6) {
diff_tax_list[[i]] <- multi_int_fun(i, 365*3, parms, init, amr, agg_func, ode_wrapper, approx_sigma)[[1]]
}
# Plotting the Scenarios --------------------------------------------------
#Create a combined list of all the scenarios
list_scen <- unlist(list(testrun_flat, single_list, diff_tax_list), recursive = FALSE)
melt_data <- list()
#Melt each one
for(i in 1:length(list_scen)) {
data_agg <- agg_func(list_scen[[i]])
colnames(data_agg)[4:6] <- c("High Res (HR)", "Medium Res (MR)", "Low Res (LR)")
melt_data[[i]] <- data.frame(melt(data_agg, id.vars = "time", measure.vars = colnames(data_agg)[4:6]),
"scen" = c("flat", "single1", "single2", "single3",
"diff1", "diff2", "diff3", "diff4", "diff5", "diff6")[i])
}
p_data <- list()
#Plotting Loop
for(i in 1:length(melt_data)) {
data <- melt_data[[i]]
p_data[[i]] <- ggplot(data, aes(time, value, color = variable)) + geom_line() + theme_bw() + theme(legend.position = "bottom") +
labs(x = "Time", y = "Prevalence", title = c("Flat Tax",
"Single Tax (HR)","Single Tax (MR)","Single Tax (LR)",
"Diff Tax (1 Rd)", "Diff Tax (2 Rd)", "Diff Tax (3 Rd)",
"Diff Tax (4 Rd)", "Diff Tax (5 Rd)", "Diff Tax (6 Rd)")[i], color = "") +
theme(legend.text = element_text(size=11),
axis.text=element_text(size=10), axis.title =element_text(size=9), title =element_text(size=9, face="bold"))
}
ggarrange(p_data[[1]], "", "",
p_data[[2]], p_data[[3]],p_data[[4]],
p_data[[5]], p_data[[6]], p_data[[7]],
p_data[[8]], p_data[[9]], p_data[[10]],
labels = c("A", "", "",
"B", "", "",
"C", "", "",
"", "", ""), hjust = -.1,  nrow = 4, ncol = 3, common.legend = T, legend = "bottom")
# Figure ------------------------------------------------------------------
figure_run <- agg_func(multi_int_fun(6, 365*3, parms, init, amr, agg_func, ode_wrapper, approx_sigma)[[1]])
m_sigma <- melt(figure_run, id.vars = "time", measure.vars = colnames(figure_run)[4:6])
ggplot(m_sigma, aes(time, value, color = variable)) + geom_line() + theme_minimal() + theme(legend.position = "bottom") +
labs(x = "Time", y = "Prevalence", color = "Antibiotic Class") + scale_y_continuous(limits = c(0,0.5), expand = c(0, 0)) +
scale_x_continuous(limits = c(0,3000) , expand = c(0.04, 0.5)) +
theme(axis.text=element_text(size=11),axis.title =element_text(size=12))
ggplot(m_sigma, aes(time, value, color = variable)) + geom_line() + theme_minimal() + theme(legend.position = "bottom") +
labs(x = "Time", y = "Prevalence", color = "Antibiotic Class") + scale_y_continuous(name = "", limits = c(0,0.5), expand = c(0, 0)) +
scale_x_continuous(limits = c(3001,3001 + 365*3) , expand = c(0, 0.5)) +
theme(axis.text=element_text(size=11), axis.title =element_text(size=12), axis.text.y = element_blank())
library("deSolve"); library("ggplot2"); library("reshape2"); library("ggpubr"); library("rootSolve"); library("viridis"); library("cowplot")
rm(list=ls())
setwd("/Users/amorgan/Documents/PostDoc/Diff_Tax_Analysis/Theoretical_Analysis/Interpolat_Diff_Tax/Euler_Run/Model_Output/New")
# Import in Dataset -------------------------------------------------------
win_import <- readRDS("MDR_run_interpol_v1.RDS")
#win_import <- readRDS("MDR_run_interpol_25.RDS")
#win_import <- readRDS("MDR_run_interpol_75.RDS")
#win_import <- readRDS("MDR_run_interpol_realPED.RDS")
for(i in seq_along(win_import)) {
win_import[[i]] <- as(win_import[[i]], class(win_import[[i]][[1]]))
}
# Altering Data Infections ------------------------------------------------
#Infections
#We want to minimise this - minimise the increase in total infections for each change in usage
win_inf <- (win_import[,1:10])
#win_inf <- (win_import_pess[,1:10])
#win_inf <- (win_import_opt[,1:10])
win_inf[is.na(win_inf)] <- 0
win_inf_trans <- t(apply(win_inf, 1, function(x) {
val = min(x)
x[x != val] <- 0
x[x == val] <- 1
return(x)}
))
prop_win_inf <- data.frame("Infections" = colSums(win_inf_trans)/nrow(win_inf_trans),
"Interventions" = as.factor(c("Flat Tax", "Single Tax (HR)", "Single Tax (MR)",
"Single Tax (LR)",
"Diff Tax (1 Round)", "Diff Tax (2 Round)",
"Diff Tax (3 Round)", "Diff Tax (4 Round)",
"Diff Tax (5 Round)", "Diff Tax (6 Round)")))
prop_win_inf$Interventions <- factor(prop_win_inf$Interventions, levels = c(prop_win_inf$Interventions))
# Altering Data Resistance ------------------------------------------------
win_res <- (win_import[,11:20])
win_res[is.na(win_res)] <- 0
win_res_trans <- t(apply(win_res, 1, function(x) {
val = max(x)
x[x != val] <- 0
x[x == val] <- 1
return(x)}
))
prop_win_res <- data.frame("Resistance" = colSums(win_res_trans)/nrow(win_res_trans),
"Interventions" = as.factor(c("Flat Tax", "Single Tax (HR)", "Single Tax (MR)",
"Single Tax (LR)",
"Diff Tax (1 Round)", "Diff Tax (2 Round)",
"Diff Tax (3 Round)", "Diff Tax (4 Round)",
"Diff Tax (5 Round)", "Diff Tax (6 Round)")))
prop_win_res$Interventions <- factor(prop_win_res$Interventions, levels = c(prop_win_res$Interventions))
# Shannon's Index ---------------------------------------------------------
win_shan <- round((win_import[,21:30]), 5)
win_shan[is.na(win_shan)] <- 0
win_shan <- win_shan[rowSums(win_shan[, -1]) > 0, ]
win_shan_trans <- t(apply(win_shan, 1, function(x) {
val = max(x)
x[is.na(x)] <- 0
x[x != val] <- 0
x[x == val] <- 1
return(x)}
))
prop_win_shan <- data.frame("Shannon_Index" = colSums(win_shan_trans)/nrow(win_shan_trans),
"Interventions" = as.factor(c("Flat Tax", "Single Tax (HR)", "Single Tax (MR)",
"Single Tax (LR)",
"Diff Tax (1 Round)", "Diff Tax (2 Round)",
"Diff Tax (3 Round)", "Diff Tax (4 Round)",
"Diff Tax (5 Round)", "Diff Tax (6 Round)")))
prop_win_shan$Interventions <- factor(prop_win_shan$Interventions, levels = c(prop_win_shan$Interventions))
# Average Number of Available Antibiotics ---------------------------------
win_avganti <- round((win_import[,31:40]), 5)
win_avganti[is.na(win_avganti)] <- 0
win_avganti <- win_avganti[rowSums(win_avganti[, -1]) > 0, ]
win_avganti_trans <- t(apply(win_avganti, 1, function(x) {
val = max(x)
x[is.na(x)] <- 0
x[x != val] <- 0
x[x == val] <- 1
return(x)}
))
prop_win_avganti <- data.frame("Average_Anti" = colSums(win_avganti_trans)/nrow(win_avganti_trans),
"Interventions" = as.factor(c("Flat Tax", "Single Tax (HR)", "Single Tax (MR)",
"Single Tax (LR)",
"Diff Tax (1 Round)", "Diff Tax (2 Round)",
"Diff Tax (3 Round)", "Diff Tax (4 Round)",
"Diff Tax (5 Round)", "Diff Tax (6 Round)")))
prop_win_avganti$Interventions <- factor(prop_win_avganti$Interventions, levels = c(prop_win_avganti$Interventions))
# Combining All Together --------------------------------------------------
combdata <- prop_win_res; combdata$Infections <- prop_win_inf$Infections; combdata$Shannon <- prop_win_shan$Shannon_Index
combdata$Average_Anti <- prop_win_avganti$Average_Anti
melt_combdata <- melt(combdata, id.vars = "Interventions", measure.vars = c("Resistance", "Infections", "Shannon", "Average_Anti"))
melt_combdata$Interventions <- factor(melt_combdata$Interventions, levels = c(prop_win_res$Interventions))
# Plotting win Probabilities ----------------------------------------------
p_inf <- ggplot(prop_win_inf, aes(y = Infections, x = as.factor(Interventions))) + geom_bar(stat="identity")  + theme_bw() +
scale_x_discrete(expand = c(0, 0)) + scale_y_continuous(expand = c(0, 0), limits = c(0, 1.01)) +
labs(y ="Probability of Optimality (Preventing Infections)", x = "", fill = "") +
theme(legend.position= "bottom", legend.text=element_text(size=12), legend.title =element_text(size=12), axis.text=element_text(size=12),
axis.title.y=element_text(size=12), axis.title.x= element_text(size=12), plot.margin = unit(c(0.35,1,0.35,1), "cm"),
legend.spacing.x = unit(0.3, 'cm'), axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
p_res <- ggplot(prop_win_res, aes(y = Resistance, x = as.factor(Interventions))) + geom_bar(stat="identity") + theme_bw() +
scale_x_discrete(expand = c(0, 0)) + scale_y_continuous(expand = c(0, 0), limits = c(0, 1.01)) +
labs(y ="Probability of Optimality (Resistance Decrease)", x = "", fill = "") +
theme(legend.position= "bottom", legend.text=element_text(size=12), legend.title =element_text(size=12), axis.text=element_text(size=12),
axis.title.y=element_text(size=12), axis.title.x= element_text(size=12), plot.margin = unit(c(0.35,1,0.35,1), "cm"),
legend.spacing.x = unit(0.3, 'cm'), axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
p_shan <- ggplot(prop_win_shan, aes(y = Shannon_Index, x = as.factor(Interventions))) + geom_bar(stat="identity") + theme_bw() +
scale_x_discrete(expand = c(0, 0)) + scale_y_continuous(expand = c(0, 0), limits = c(0, 1.01)) +
labs(y ="Probability of Optimality (Highest SI)", x = "", fill = "") +
theme(legend.position= "bottom", legend.text=element_text(size=12), legend.title =element_text(size=12), axis.text=element_text(size=12),
axis.title.y=element_text(size=12), axis.title.x= element_text(size=12), plot.margin = unit(c(0.35,1,0.35,1), "cm"),
legend.spacing.x = unit(0.3, 'cm'), axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
p_avg_anti <- ggplot(prop_win_avganti, aes(y = Average_Anti, x = as.factor(Interventions))) + geom_bar(stat="identity") + theme_bw() +
scale_x_discrete(expand = c(0, 0)) + scale_y_continuous(expand = c(0, 0), limits = c(0, 1.01)) +
labs(y ="Probability of Optimality (Highest SI)", x = "", fill = "") +
theme(legend.position= "bottom", legend.text=element_text(size=12), legend.title =element_text(size=12), axis.text=element_text(size=12),
axis.title.y=element_text(size=12), axis.title.x= element_text(size=12), plot.margin = unit(c(0.35,1,0.35,1), "cm"),
legend.spacing.x = unit(0.3, 'cm'), axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
ggarrange(p_inf, p_res, p_shan, ncol = 1, nrow = 4)
#Combination Plot
p_comb <- ggplot(melt_combdata, aes(y = value, x = as.factor(Interventions), fill = variable)) +
geom_bar(stat="identity", position = position_dodge())  + theme_bw() +
scale_x_discrete(expand = c(0, 0)) + scale_y_continuous(expand = c(0, 0), limits = c(0, 1.01)) +
labs(y ="Probability of Intervention Winning", x = "", fill = "") +
theme(legend.position= "bottom", legend.text=element_text(size=12), legend.title =element_text(size=12), axis.text=element_text(size=12),
axis.title.y=element_text(size=12), axis.title.x= element_text(size=12), plot.margin = unit(c(0.35,1,0.35,1), "cm"),
legend.spacing.x = unit(0.3, 'cm'), axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
scale_fill_manual(values = c("red", "blue", "orange", "darkgreen"),labels = c("Resistance", "Infections","Shannons Index", "Average Antibiotics"))
# Proportion of Wins HeatMap ----------------------------------------------
melt_combdata$value <- round(melt_combdata$value, digits = 3)
ggplot(melt_combdata, aes(Interventions, variable)) + theme_bw() +
geom_tile(aes(fill = value)) +
facet_grid(variable ~ ., scales = "free_y") +
geom_text(aes(label=value), color = "black") +
scale_fill_distiller(palette ="Blues", direction = 1) +
scale_x_discrete(name = "", expand = c(0, 0))  +
scale_y_discrete(name = "Outcome Measure", expand = c(0, 0)) +
guides(fill = guide_colorbar(title = "Probabilty that \nIntervention Wins",
label.position = "bottom",
title.position = "left", title.vjust = 1,
# draw border around the legend
frame.colour = "black",
barwidth = 15,
barheight = 1)) +
theme(strip.background = element_blank(), axis.text=element_text(size=11),
strip.text = element_blank(), legend.position="bottom",
axis.text.x = element_text(angle = 45, hjust=1))
# Isolated Sensitivity Analysis -------------------------------------------
#For Infections and Resistance
combdata_infres <- prop_win_res; combdata_infres$Infections <- prop_win_inf$Infections; combdata_infres$AvgAnti <- prop_win_avganti$Average_Anti
melt_combdata_infres <- melt(combdata_infres, id.vars = "Interventions", measure.vars = c("Resistance", "Infections", "AvgAnti"))
melt_combdata_infres$Interventions <- factor(melt_combdata_infres$Interventions, levels = c(prop_win_res$Interventions))
melt_combdata_infres$value <- round(melt_combdata_infres$value, digits = 3)
ggplot(melt_combdata_infres, aes(Interventions, variable)) + theme_bw() +
geom_tile(aes(fill = value)) +
facet_grid(variable ~ ., scales = "free_y") +
geom_text(aes(label=value), color = "black") +
scale_fill_distiller(palette ="Blues", direction = 1) +
scale_x_discrete(name = "", expand = c(0, 0))  +
scale_y_discrete(name = "Outcome Measure", expand = c(0, 0)) +
guides(fill = guide_colorbar(title = "Probabilty that \nIntervention Wins",
label.position = "bottom",
title.position = "left", title.vjust = 1,
# draw border around the legend
frame.colour = "black",
barwidth = 15,
barheight = 1)) +
theme(strip.background = element_blank(), axis.text=element_text(size=11),
strip.text = element_blank(), legend.position="bottom",
axis.text.x = element_text(angle = 45, hjust=1))
#For antibiotic availability related measures
combdata_shanavg <- prop_win_shan
melt_combdata_shanavg<- melt(combdata_shanavg, id.vars = "Interventions", measure.vars = c("Shannon_Index"))
melt_combdata_shanavg$Interventions <- factor(melt_combdata_shanavg$Interventions, levels = c(prop_win_res$Interventions))
melt_combdata_shanavg$value <- round(melt_combdata_shanavg$value, digits = 3)
ggplot(melt_combdata_shanavg, aes(Interventions, variable)) + theme_bw() +
geom_tile(aes(fill = value)) +
facet_grid(variable ~ ., scales = "free_y") +
geom_text(aes(label=value), color = "black") +
scale_fill_distiller(palette ="Blues", direction = 1) +
scale_x_discrete(name = "", expand = c(0, 0))  +
scale_y_discrete(name = "", expand = c(0, 0)) +
guides(fill = guide_colorbar(title = "Probabilty that \nIntervention Wins",
label.position = "bottom",
title.position = "left", title.vjust = 1,
# draw border around the legend
frame.colour = "black",
barwidth = 15,
barheight = 1)) +
theme(strip.background = element_blank(), axis.text=element_text(size=11),
strip.text = element_blank(), legend.position="bottom",
axis.text.x = element_text(angle = 45, hjust=1))
