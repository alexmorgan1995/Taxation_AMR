}
beta_region_list
average_frame_regions = data.frame(matrix(nrow = length(ordered_oie)+1, ncol = 3))
c("Baseline", ordered_oie))
c("Baseline", ordered_oie)
(length(ordered_oie)+1)
ordered_oie
average_frame_regions = data.frame(matrix(nrow = length(ordered_oie)+1, ncol = 3))
for(i in 1:(length(ordered_oie)+1)) {
#Insert the usage dataframe for the different combinations
parms[["beta_signal"]] = as.matrix(beta_region_list[[i]])
#Run the Model
out <- ode(n0, seq(0, 365*20, 1), model, parms)
comb_data_2020_2030 <- data.frame(out[(365*10)+1,-1],
out[(365*20)+1,-1])
comb_data_2020_2030$kg <- usage_kg[match(colnames(parms$Pr_signal)[-1], usage_kg$rf.clusters),]$all
rownames(comb_data_2020_2030) = colnames(parms$Pr_signal)[-1]; colnames(comb_data_2020_2030) = c("Yr_2020", "Yr_2030", "kg")
average_frame_regions[i,] = data.frame("Yr_2020" = weighted.mean(comb_data_2020_2030$Yr_2020, comb_data_2020_2030$kg),
"Yr_2030" = weighted.mean(comb_data_2020_2030$Yr_2030, comb_data_2020_2030$kg),
"Cluster" = c("Baseline", ordered_oie))[i]
print(paste0(round((i/length(ordered_oie))*100, digits = 3), "%"))
}
comb_data_2020_2030
data.frame("Yr_2020" = weighted.mean(comb_data_2020_2030$Yr_2020, comb_data_2020_2030$kg),
"Yr_2030" = weighted.mean(comb_data_2020_2030$Yr_2030, comb_data_2020_2030$kg),
"Cluster" = c("Baseline", ordered_oie))[3]
data.frame("Yr_2020" = weighted.mean(comb_data_2020_2030$Yr_2020, comb_data_2020_2030$kg),
"Yr_2030" = weighted.mean(comb_data_2020_2030$Yr_2030, comb_data_2020_2030$kg),
"Cluster" = c("Baseline", ordered_oie)[1])
beta_region_list <- append(beta_list, list(beta_data_reduc), after = 0)
#Run the Models
average_frame_regions = data.frame(matrix(nrow = length(ordered_oie)+1, ncol = 3))
for(i in 1:(length(ordered_oie)+1)) {
#Insert the usage dataframe for the different combinations
parms[["beta_signal"]] = as.matrix(beta_region_list[[i]])
#Run the Model
out <- ode(n0, seq(0, 365*20, 1), model, parms)
comb_data_2020_2030 <- data.frame(out[(365*10)+1,-1],
out[(365*20)+1,-1])
comb_data_2020_2030$kg <- usage_kg[match(colnames(parms$Pr_signal)[-1], usage_kg$rf.clusters),]$all
rownames(comb_data_2020_2030) = colnames(parms$Pr_signal)[-1]; colnames(comb_data_2020_2030) = c("Yr_2020", "Yr_2030", "kg")
average_frame_regions[i,] = data.frame("Yr_2020" = weighted.mean(comb_data_2020_2030$Yr_2020, comb_data_2020_2030$kg),
"Yr_2030" = weighted.mean(comb_data_2020_2030$Yr_2030, comb_data_2020_2030$kg),
"Cluster" = c("Baseline", ordered_oie)[i])
print(paste0(round((i/length(ordered_oie))*100, digits = 3), "%"))
}
View(cluster.id)
library("deSolve"); library("reshape2"); library("simecol"); library("ggplot2"); library("ggpubr"); library("mekko");library("dplyr")
library("rstan")
rm(list=ls())
# Vectorised ODEs ---------------------------------------------------------
# These ODEs are in vectorised format
# dn refers to the change in resistace for country n
# We have a number of constant parameters lambda, beta, alpha and gamma
# We also have a number of matrices that need to included in the model, relating to trade and treatment
# We specify the number of countries with the vector for the initial conditions and we need to
# make sure that the number of columns and elements in a vector match up
# We also have a P_r parameter which for every time step returns a vector of treatment rates to put into the ODE
# This works in a similar way to the lambda parameter example - generating a vector for use in the model
# This uses this vectorised version of approxfun from the package simecol
model <- function(t, n, parms) {
with(parms, {
P_r = approxTime(Pr_signal, t, rule = 2, f=0, method="constant")[-1]
dn <- - lambda*n + ((trade) %*% ((bn) * n)*(1-n)) + P_r*alpha*(1-n) - gamma*n
list(dn)
})
}
# Data Import -------------------------------------------------------------
#Trade
trade <- read.csv("/Users/amorgan/Documents/PostDoc/Metapopulation_Model/Data/Trade/trade_cluster.csv")
rownames(trade) <- trade$X; trade <- trade[,-1]
#Usage
usage <- read.csv("/Users/amorgan/Documents/PostDoc/Metapopulation_Model/Data/Usage/usage_cluster.csv")
usage <- usage %>% arrange(factor(rf.clusters, levels = rownames(trade)))
rownames(usage) <- usage$rf.clusters
usage <- usage[,-c(1,2,14)]
usage_model <- as.data.frame(t(usage)); usage_model <- usage_model[nrow(usage_model):1,]
usage_model <- usage_model/max(usage_model, na.rm = T)
usage_model <- cbind(data.frame("time" = seq(0, 365*10, 365)), usage_model)
#Resistance
resistance <- read.csv("/Users/amorgan/Documents/PostDoc/Metapopulation_Model/Data/Resistance/clustered_resistance.csv")
resistance <- resistance[,-c(1,2,4 ,5,6)]
resistance = resistance[resistance$Year > 2010,]
#MCMC Output
# model_fit <- readRDS("/Users/amorgan/Documents/PostDoc/Metapopulation_Model/ModelFiles/Fitting/Euler_run/Test/Cluster_gamma_out.RDS")
model_fit <- readRDS("/Users/amorgan/Documents/PostDoc/Metapopulation_Model/ModelFiles/Fitting/Euler_run/Test/Cluster_gamma_out_2000_4_updatev3.RDS")
library("deSolve"); library("reshape2"); library("simecol"); library("ggplot2"); library("ggpubr"); library("mekko");library("dplyr")
library("rstan")
rm(list=ls())
# Vectorised ODEs ---------------------------------------------------------
# These ODEs are in vectorised format
# dn refers to the change in resistace for country n
# We have a number of constant parameters lambda, beta, alpha and gamma
# We also have a number of matrices that need to included in the model, relating to trade and treatment
# We specify the number of countries with the vector for the initial conditions and we need to
# make sure that the number of columns and elements in a vector match up
# We also have a P_r parameter which for every time step returns a vector of treatment rates to put into the ODE
# This works in a similar way to the lambda parameter example - generating a vector for use in the model
# This uses this vectorised version of approxfun from the package simecol
model <- function(t, n, parms) {
with(parms, {
P_r = approxTime(Pr_signal, t, rule = 2, f=0, method="constant")[-1]
dn <- - lambda*n + ((trade) %*% ((bn) * n)*(1-n)) + P_r*alpha*(1-n) - gamma*n
list(dn)
})
}
# Data Import -------------------------------------------------------------
#Trade
trade <- read.csv("/Users/amorgan/Documents/PostDoc/Metapopulation_Model/Data/Trade/trade_cluster.csv")
rownames(trade) <- trade$X; trade <- trade[,-1]
#Usage
usage <- read.csv("/Users/amorgan/Documents/PostDoc/Metapopulation_Model/Data/Usage/usage_cluster.csv")
usage <- usage %>% arrange(factor(rf.clusters, levels = rownames(trade)))
rownames(usage) <- usage$rf.clusters
usage <- usage[,-c(1,2,14)]
usage_model <- as.data.frame(t(usage)); usage_model <- usage_model[nrow(usage_model):1,]
usage_model <- usage_model/max(usage_model, na.rm = T)
usage_model <- cbind(data.frame("time" = seq(0, 365*10, 365)), usage_model)
#Resistance
resistance <- read.csv("/Users/amorgan/Documents/PostDoc/Metapopulation_Model/Data/Resistance/clustered_resistance.csv")
resistance <- resistance[,-c(1,2,4 ,5,6)]
resistance = resistance[resistance$Year > 2010,]
#MCMC Output
#model_fit <- readRDS("/Users/amorgan/Documents/PostDoc/Metapopulation_Model/Model_Output/Cluster_output_av_fullsend.RDS")
model_fit <- readRDS("/Users/amorgan/Documents/PostDoc/Metapopulation_Model/ModelFiles/Fitting/Euler_run/Test/Cluster_gamma_out_2000_4_updatev3.RDS")
model_fit <- readRDS("/Users/amorgan/Documents/PostDoc/Metapopulation_Model/ModelFiles/Fitting/Euler_run/Cluster_gamma_out_2000_4_updatev3.RDS")
pars = c(sprintf("beta[%s]",seq(1:46)), "gamma", "alpha", sprintf("res_init[%s]",seq(1:46)))
data_points = sprintf("beta[%s]",seq(1:46))
parm_fits <- stan_dens(model_fit, pars = pars, separate_chains = TRUE)
pars
data_points = sprintf("beta[%s]",seq(1:46))
print(model_fit, pars = pars)
#Check the Posteriors
pars = c(sprintf("beta[%s]",seq(1:46)), "gamma",sprintf("alpha[%s]",seq(1:46)))
pars
data_points = sprintf("beta[%s]",seq(1:46))
print(model_fit, pars = pars)
parm_fits <- stan_dens(model_fit, pars = pars, separate_chains = TRUE)
parm_fits
rm(list=ls())
library(rstan)
library(dplyr)
library(deSolve)
# Stan Options ------------------------------------------------------------
rstan_options(auto_write = TRUE)
options (mc.cores = parallel::detectCores ())
# Import in the Data ------------------------------------------------------
#The Clustered World Trade
trade <- read.csv("/cluster/home/amorgan/Metapopulation/Cluster_Data/trade_cluster.csv")
#The Clustered World Trade
trade <- read.csv("/Users/amorgan/Documents/PostDoc/Metapopulation_Model/Data/trade_cluster.csv")
#The Clustered World Trade
trade <- read.csv("/Users/amorgan/Documents/PostDoc/Metapopulation_Model/Data/Trade/trade_cluster.csv")
#Resistance Data
resistance <- read.csv("/Users/amorgan/Documents/PostDoc/Metapopulation_Model/Data/Resistance/clustered_resistance.csv")
rm(list=ls())
library(rstan)
library(dplyr)
library(deSolve)
# Stan Options ------------------------------------------------------------
rstan_options(auto_write = TRUE)
options (mc.cores = parallel::detectCores ())
# Import in the Data ------------------------------------------------------
#The Clustered World Trade
trade <- read.csv("/Users/amorgan/Documents/PostDoc/Metapopulation_Model/Data/Trade/trade_cluster.csv")
rownames(trade) <- trade$X; trade <- trade[,-1]
#Resistance Data
resistance <- read.csv("/Users/amorgan/Documents/PostDoc/Metapopulation_Model/Data/Resistance/clustered_resistance.csv")
resistance <- resistance[,-c(1,2,4 ,5,6)]
resistance = resistance[resistance$Year > 2010,]
#Usage Data
usage <- read.csv("/Users/amorgan/Documents/PostDoc/Metapopulation_Model/Data/Usage/usage_cluster.csv")
rm(list=ls())
library(rstan)
library(dplyr)
library(deSolve)
# Stan Options ------------------------------------------------------------
rstan_options(auto_write = TRUE)
options (mc.cores = parallel::detectCores ())
# Import in the Data ------------------------------------------------------
#The Clustered World Trade
trade <- read.csv("/Users/amorgan/Documents/PostDoc/Metapopulation_Model/Data/Trade/trade_cluster.csv")
rownames(trade) <- trade$X; trade <- trade[,-1]
#Resistance Data
resistance <- read.csv("/Users/amorgan/Documents/PostDoc/Metapopulation_Model/Data/Resistance/clustered_resistance.csv")
resistance <- resistance[,-c(1,2,4 ,5,6)]
resistance = resistance[resistance$Year > 2010,]
resistance$isocombin <- paste0(resistance$cluster,"_", resistance$Year)
resistanceid <- data.frame("cluster.id" = c(sapply(rownames(trade), function(x) sprintf(paste0(x,"_","%s"), 2010:2020))))
#Usage Data
usage <- read.csv("/Users/amorgan/Documents/PostDoc/Metapopulation_Model/Data/Usage/usage_cluster.csv")
usage <- usage %>% arrange(factor(rf.clusters, levels = rownames(trade)))
rownames(usage) <- usage$rf.clusters
usage <- usage[,-c(1,2,14)]
usage_model <- as.data.frame(t(usage)); usage_model <- usage_model[nrow(usage_model):1,]
usage_model <- usage_model/max(usage_model, na.rm = T)
usage_model_vec <- colMeans(usage_model)
# Parameters and Model Data -------------------------
usage_model_vec
resistanceid
resistance
resistance
unique(resistance$cluster)
resistance
View(resistance)
rm(list=ls())
library(rstan)
library(dplyr)
library(deSolve)
# Stan Options ------------------------------------------------------------
rstan_options(auto_write = TRUE)
options (mc.cores = parallel::detectCores ())
# Import in the Data ------------------------------------------------------
#The Clustered World Trade
trade <- read.csv("/Users/amorgan/Documents/PostDoc/Metapopulation_Model/Data/Trade/trade_cluster.csv")
rownames(trade) <- trade$X; trade <- trade[,-1]
#Resistance Data
resistance <- read.csv("/Users/amorgan/Documents/PostDoc/Metapopulation_Model/Data/Resistance/clustered_resistance.csv")
resistance <- resistance[,-c(1,2,4 ,5,6)]
resistance = resistance[resistance$Year > 2010,]
resistance$isocombin <- paste0(resistance$cluster,"_", resistance$Year)
resistanceid <- data.frame("cluster.id" = c(sapply(rownames(trade), function(x) sprintf(paste0(x,"_","%s"), 2010:2020))))
#Usage Data
usage <- read.csv("/Users/amorgan/Documents/PostDoc/Metapopulation_Model/Data/Usage/usage_cluster.csv")
usage <- usage %>% arrange(factor(rf.clusters, levels = rownames(trade)))
rownames(usage) <- usage$rf.clusters
usage <- usage[,-c(1,2,14)]
usage_model <- as.data.frame(t(usage)); usage_model <- usage_model[nrow(usage_model):1,]
usage_model <- usage_model/max(usage_model, na.rm = T)
usage_model_vec <- colMeans(usage_model)
unique(resistance$cluster)
# Parameters and Model Data -----------------------------------------------
n_years <- nrow(usage_model)
t <- seq(0, (365*n_years), by = 1)
t0 = 0
t <- t[-1]
lambda = 1/365
n_countries = ncol(usage_model)
res_init = rep(0.5, n_countries)
names_country = colnames(usage_model)
#The "Real" parameters that must be fed into the Stan function for the ODE
x_r = c(unlist(trade), #The Trade Matrix, turned into a vector columnwise
unlist(usage_model_vec) #Antibiotic usage for all 30 countries as a vector
)
#Need to create a vector for the positions of the data points (resistance)
resistance_match <- match(resistance$isocombin, resistanceid$cluster.id)
length_match <- length(resistance_match)
#Create a list of data for Stan
data_AMR <- list(n_years = n_years,
lambda = lambda,
t0 = as.integer(t0),
ts = as.integer(t),
length_match = as.integer(length_match),
resistance = resistance$possamples,
n_samples = as.integer(resistance$N_Samples),
res_init = res_init,
res_match = resistance_match,
names_country = names_country,
n_countries = n_countries,
x_r = x_r)
# number of MCMC steps
niter <- 2000
#Import in the Model
model <- stan_model("/Users/amorgan/Documents/PostDoc/Metapopulation_Model/ModelFiles/Fitting/Euler_run/Cluster_Stan_v2_usage.stan")
fit_sir_negbin <- sampling(model,
data = data_AMR,
iter = niter,
chains = 4,
seed = 0,
init_r = 1,
verbose = T,
refresh = niter/niter) #The lower the number, the more often the iterator updates
resistance
resistance
data.frame("cluster.id" = c(sapply(rownames(trade), function(x) sprintf(paste0(x,"_","%s"), 2010:2020))))
resistanceid <- data.frame("cluster.id" = c(sapply(rownames(trade), function(x) sprintf(paste0(x,"_","%s"), 2010:2020))))
View(resistanceid)
resistanceid$cluster.id
match(resistance$isocombin, resistanceid$cluster.id)
resistanceid$cluster.id
resistance_match
resistanceid$cluster.id[resistance_match]
test <- resistanceid$cluster.id[resistance_match]
resistance$isocombin
test <- resistanceid$cluster.id[resistance_match]
resistance$isocombin
?match
resistanceid$cluster.id
resistanceid[resistanceid$cluster.id %in% resistance$isocombin]
resistanceid[2,resistanceid$cluster.id %in% resistance$isocombin]
resistanceid[resistanceid$cluster.id %in% resistance$isocombin2,]
resistanceid[resistanceid$cluster.id %in% resistance$isocombin,]
resistance
resistanceid
rownames(trade)
data.frame("all_cluster" = rownames(trade))
test <- data.frame("all_cluster" = rownames(trade))
resistanceid$cluster.id
resistance
resistance$cluster
unique(resistance$cluster)
unique(resistance$cluster)
resistance
for(i in 1:unique(resistance$cluster))
test <- data.frame("all_cluster" = rownames(trade),
"match_cluster" = NA)
test
data.frame("all_cluster" = rownames(trade),
"match_cluster" = NA)
test <- data.frame("all_cluster" = rownames(trade),
"match_cluster" = NA)
test <- data.frame("all_cluster" = rownames(trade),
"match_cluster" = NA)
for(i in unique(resistance$cluster)) {
test[test$all_cluster == i,] <- i
}
test
test <- data.frame("all_cluster" = rownames(trade),
"match_cluster" = NA,
"no_years" = NA)
resistance
resistance$cluster
resistance$cluster == i
count(resistance$cluster == i)
table(resistance$cluster == i)
table(resistance$cluster == i)[2]
test <- data.frame("all_cluster" = rownames(trade),
"match_cluster" = NA,
"no_years" = NA)
for(i in unique(resistance$cluster)) {
test[test$all_cluster == i,]$match_cluster <- i
test[test$all_cluster == i,]$no_years <- table(resistance$cluster == i)[2]
}
test
library("deSolve"); library("reshape2"); library("simecol"); library("ggplot2"); library("ggpubr"); library("mekko");library("dplyr")
library("rstan")
rm(list=ls())
# Vectorised ODEs ---------------------------------------------------------
# These ODEs are in vectorised format
# dn refers to the change in resistace for country n
# We have a number of constant parameters lambda, beta, alpha and gamma
# We also have a number of matrices that need to included in the model, relating to trade and treatment
# We specify the number of countries with the vector for the initial conditions and we need to
# make sure that the number of columns and elements in a vector match up
# We also have a P_r parameter which for every time step returns a vector of treatment rates to put into the ODE
# This works in a similar way to the lambda parameter example - generating a vector for use in the model
# This uses this vectorised version of approxfun from the package simecol
model <- function(t, n, parms) {
with(parms, {
P_r = approxTime(Pr_signal, t, rule = 2, f=0, method="constant")[-1]
dn <- - lambda*n + ((trade) %*% ((bn) * n)*(1-n)) + P_r*alpha*(1-n) - gamma*n
list(dn)
})
}
# Data Import -------------------------------------------------------------
#Trade
trade <- read.csv("/Users/amorgan/Documents/PostDoc/Metapopulation_Model/Data/Trade/trade_cluster.csv")
rownames(trade) <- trade$X; trade <- trade[,-1]
#Usage
usage <- read.csv("/Users/amorgan/Documents/PostDoc/Metapopulation_Model/Data/Usage/usage_cluster.csv")
usage <- usage %>% arrange(factor(rf.clusters, levels = rownames(trade)))
rownames(usage) <- usage$rf.clusters
usage <- usage[,-c(1,2,14)]
usage_model <- as.data.frame(t(usage)); usage_model <- usage_model[nrow(usage_model):1,]
usage_model <- usage_model/max(usage_model, na.rm = T)
usage_model <- cbind(data.frame("time" = seq(0, 365*10, 365)), usage_model)
#Resistance
resistance <- read.csv("/Users/amorgan/Documents/PostDoc/Metapopulation_Model/Data/Resistance/clustered_resistance.csv")
resistance <- resistance[,-c(1,2,4 ,5,6)]
resistance = resistance[resistance$Year > 2010,]
#MCMC Output
# model_fit <- readRDS("/Users/amorgan/Documents/PostDoc/Metapopulation_Model/ModelFiles/Fitting/Euler_run/Test/Cluster_gamma_out.RDS")
model_fit <- readRDS("/Users/amorgan/Documents/PostDoc/Metapopulation_Model/ModelFiles/Fitting/Euler_run/Test/Cluster_gamma_out_2000_4_updatev3.RDS")
library("deSolve"); library("reshape2"); library("simecol"); library("ggplot2"); library("ggpubr"); library("mekko");library("dplyr")
library("rstan")
rm(list=ls())
# Vectorised ODEs ---------------------------------------------------------
# These ODEs are in vectorised format
# dn refers to the change in resistace for country n
# We have a number of constant parameters lambda, beta, alpha and gamma
# We also have a number of matrices that need to included in the model, relating to trade and treatment
# We specify the number of countries with the vector for the initial conditions and we need to
# make sure that the number of columns and elements in a vector match up
# We also have a P_r parameter which for every time step returns a vector of treatment rates to put into the ODE
# This works in a similar way to the lambda parameter example - generating a vector for use in the model
# This uses this vectorised version of approxfun from the package simecol
model <- function(t, n, parms) {
with(parms, {
P_r = approxTime(Pr_signal, t, rule = 2, f=0, method="constant")[-1]
dn <- - lambda*n + ((trade) %*% ((bn) * n)*(1-n)) + P_r*alpha*(1-n) - gamma*n
list(dn)
})
}
# Data Import -------------------------------------------------------------
#Trade
trade <- read.csv("/Users/amorgan/Documents/PostDoc/Metapopulation_Model/Data/Trade/trade_cluster.csv")
rownames(trade) <- trade$X; trade <- trade[,-1]
#Usage
usage <- read.csv("/Users/amorgan/Documents/PostDoc/Metapopulation_Model/Data/Usage/usage_cluster.csv")
usage <- usage %>% arrange(factor(rf.clusters, levels = rownames(trade)))
rownames(usage) <- usage$rf.clusters
usage <- usage[,-c(1,2,14)]
usage_model <- as.data.frame(t(usage)); usage_model <- usage_model[nrow(usage_model):1,]
usage_model <- usage_model/max(usage_model, na.rm = T)
usage_model <- cbind(data.frame("time" = seq(0, 365*10, 365)), usage_model)
#Resistance
resistance <- read.csv("/Users/amorgan/Documents/PostDoc/Metapopulation_Model/Data/Resistance/clustered_resistance.csv")
resistance <- resistance[,-c(1,2,4 ,5,6)]
resistance = resistance[resistance$Year > 2010,]
#MCMC Output
# model_fit <- readRDS("/Users/amorgan/Documents/PostDoc/Metapopulation_Model/ModelFiles/Fitting/Euler_run/Test/Cluster_gamma_out.RDS")
model_fit <- readRDS("/Users/amorgan/Documents/PostDoc/Metapopulation_Model/ModelFiles/Fitting/Euler_run/Cluster_gamma_out_2000_4_updatev3.RDS")
library("deSolve"); library("ggplot2"); library("reshape2"); library("ggpubr"); library("rootSolve"); library("viridis"); library("cowplot")
rm(list=ls())
setwd("/Users/amorgan/Documents/PostDoc/Diff_Tax_Analysis/Theoretical_Analysis/Interpolat_Diff_Tax/Euler_Run/Model_Output/Bans/")
# Calculating Intervention Failure ----------------------------------------
intfail <- function(win_import_change) {
data <- win_import_change[,c(16:30)]
prop_vec <- data.frame("intervention" = colnames(data),
"prop_inc" = NA)
for(i in 1:15) {
prop_1000 <- data[,i]
if(sum(!is.na(prop_1000)) == 0) {
prop_vec[i,2] <- NA
} else{
prop_vec[i,2] <- length(prop_1000[prop_1000 == -1000])/sum(!is.na(prop_1000)) #out of the interventions which actually run - which ones fail
}
}
return(prop_vec)
}
# Import in Dataset -------------------------------------------------------
#4 antibiotic classes
win_import_4class <- readRDS("MDR_run_four_tax.RDS")
colnames(win_import_4class)[grep("MR1", colnames(win_import_4class))] <- c("singleMR_inf", "banMR_inf", "singleMR_res" , "banMR_res",
"singleMR_shan","banMR_shan","banMR_avganti")
winintfail_fourclass <- win_import_4class
win_import_4class[win_import_4class == -1000] <- NA
win_import_4class$scen <- "Four Classes"
#Baseline
win_import_base <- readRDS("MDR_run_Base_tax.RDS")
win_import_base[c("singleMR2_inf",  "singleMR2_res", "singleMR2_shan", "singleMR2_avganti",
"banMR2_inf",  "banMR2_res", "banMR2_shan", "banMR2_avganti")] <- NA
win_import_base$scen <- "Baseline"
win_import_base <- win_import_base[,colnames(win_import_4class)]; winintfail_base <- win_import_base
win_import_base[win_import_base == -1000] <- NA
#Tax 10% of Revenue
win_import_tax10 <- readRDS("/Users/amorgan/Documents/PostDoc/Diff_Tax_Analysis/Theoretical_Analysis/Interpolat_Diff_Tax/Euler_Run/Model_Output/Revisions/MDR_run_Base_tax10.RDS")
win_import_tax10[c("singleMR2_inf",  "singleMR2_res", "singleMR2_shan", "singleMR2_avganti",
"banMR2_inf",  "banMR2_res", "banMR2_shan", "banMR2_avganti")] <- NA
win_import_tax10$scen <- "Tax 10%"
win_import_tax10 <- win_import_tax10[,colnames(win_import_4class)]; winintfail_tax10 <- win_import_tax10
win_import_tax10[win_import_tax10 == -1000] <- NA
#Tax 25% of Revenue
win_import_tax25 <- readRDS("MDR_run_Base_tax25.RDS")
win_import_tax25[c("singleMR2_inf",  "singleMR2_res", "singleMR2_shan", "singleMR2_avganti",
"banMR2_inf",  "banMR2_res", "banMR2_shan", "banMR2_avganti")] <- NA
win_import_tax25$scen <- "Tax 25%"
win_import_tax25 <- win_import_tax25[,colnames(win_import_4class)]; winintfail_tax25 <- win_import_tax25
win_import_tax25[win_import_tax25 == -1000] <- NA
#Tax 75% of Revenue
win_import_tax75 <- readRDS("MDR_run_Base_tax75.RDS")
win_import_tax75[c("singleMR2_inf",  "singleMR2_res", "singleMR2_shan", "singleMR2_avganti",
"banMR2_inf",  "banMR2_res", "banMR2_shan", "banMR2_avganti")] <- NA
win_import_tax75$scen <- "Tax 75%"
win_import_tax75 <- win_import_tax75[,colnames(win_import_4class)]; winintfail_tax75 <- win_import_tax75
win_import_tax75[win_import_tax75 == -1000] <- NA
#Tax 90% of Revenue
win_import_tax90 <- readRDS("/Users/amorgan/Documents/PostDoc/Diff_Tax_Analysis/Theoretical_Analysis/Interpolat_Diff_Tax/Euler_Run/Model_Output/Revisions/MDR_run_Base_tax90.RDS")
win_import_tax90[c("singleMR2_inf",  "singleMR2_res", "singleMR2_shan", "singleMR2_avganti",
"banMR2_inf",  "banMR2_res", "banMR2_shan", "banMR2_avganti")] <- NA
win_import_tax90$scen <- "Tax 90%"
win_import_tax90 <- win_import_tax90[,colnames(win_import_4class)]; winintfail_tax90 <- win_import_tax90
win_import_tax90[win_import_tax90 == -1000] <- NA
library("deSolve"); library("reshape2"); library("simecol"); library("ggplot2"); library("ggpubr"); library("mekko");library("dplyr")
library("rstan")
rm(list=ls())
# Vectorised ODEs ---------------------------------------------------------
# These ODEs are in vectorised format
# dn refers to the change in resistace for country n
# We have a number of constant parameters lambda, beta, alpha and gamma
# We also have a number of matrices that need to included in the model, relating to trade and treatment
# We specify the number of countries with the vector for the initial conditions and we need to
# make sure that the number of columns and elements in a vector match up
# We also have a P_r parameter which for every time step returns a vector of treatment rates to put into the ODE
# This works in a similar way to the lambda parameter example - generating a vector for use in the model
# This uses this vectorised version of approxfun from the package simecol
model <- function(t, n, parms) {
with(parms, {
P_r = approxTime(Pr_signal, t, rule = 2, f=0, method="constant")[-1]
dn <- - lambda*n + ((trade) %*% ((bn) * n)*(1-n)) + P_r*alpha*(1-n) - gamma*n
list(dn)
})
}
# Data Import -------------------------------------------------------------
#Trade
trade <- read.csv("/Users/amorgan/Documents/PostDoc/Metapopulation_Model/Data/Trade/trade_cluster.csv")
rownames(trade) <- trade$X; trade <- trade[,-1]
#Usage
usage <- read.csv("/Users/amorgan/Documents/PostDoc/Metapopulation_Model/Data/Usage/usage_cluster.csv")
usage <- usage %>% arrange(factor(rf.clusters, levels = rownames(trade)))
rownames(usage) <- usage$rf.clusters
usage <- usage[,-c(1,2,14)]
usage_model <- as.data.frame(t(usage)); usage_model <- usage_model[nrow(usage_model):1,]
usage_model <- usage_model/max(usage_model, na.rm = T)
usage_model <- cbind(data.frame("time" = seq(0, 365*10, 365)), usage_model)
#Resistance
resistance <- read.csv("/Users/amorgan/Documents/PostDoc/Metapopulation_Model/Data/Resistance/clustered_resistance.csv")
resistance <- resistance[,-c(1,2,4 ,5,6)]
resistance = resistance[resistance$Year > 2010,]
#MCMC Output
# model_fit <- readRDS("/Users/amorgan/Documents/PostDoc/Metapopulation_Model/ModelFiles/Fitting/Euler_run/Test/Cluster_gamma_out.RDS")
model_fit <- readRDS("/Users/amorgan/Documents/PostDoc/Metapopulation_Model/ModelFiles/Fitting/Euler_run/Cluster_gamma_out_2000_4_updatev3.RDS")
