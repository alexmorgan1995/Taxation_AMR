scale_x_discrete(labels= c("FT", "ST (HR)",
"ST (LR)",
"DT (1Rd)", "DT (2Rd)",
"DT (3Rd)", "DT (4Rd)",
"DT (5Rd)", "DT (6Rd)"))
comb_shan <- ggarrange(box_shan, win_shan_p, ncol =1, nrow= 2, heights = c(1, 0.6), align = "v")
# Combine the Plots Together ----------------------------------------------
test <- ggarrange(comb_res, comb_inf,
comb_avg_anti, labels= c("A", "B", "C"), font.label=list(color="black",size=20) ,nrow = 3, ncol = 1, align="hv",
heights = c(0.1, 0.1, 0.1), common.legend = T)
ggsave(test, filename = "test_full.png", dpi = 300, width = 9, height = 12, units = "in",
path = "/Users/amorgan/Desktop")
ggsave(comb_shan, filename = "shan_full.png", dpi = 300, width = 9, height = 3.5, units = "in",
path = "/Users/amorgan/Desktop")
prop_vec$prop_inc
library("deSolve"); library("ggplot2"); library("reshape2"); library("ggpubr"); library("rootSolve"); library("viridis"); library("cowplot")
rm(list = ls())
setwd("/Users/amorgan/Documents/PostDoc/Diff_Tax_Analysis/Theoretical_Analysis/Interpolat_Diff_Tax/Euler_Run/Model_Output/New_v2")
# Import in Dataset -------------------------------------------------------
win_import_change <- readRDS("MDR_run_four.RDS"); win_import <- win_import_change
win_import[win_import == -1000] <- NA
for(i in seq_along(win_import)) {
win_import[[i]] <- as(win_import[[i]], class(win_import[[i]][[1]]))
}
#Infections
win_inf <- (win_import[,1:11])
plot(density(win_inf[,1]))
#Testing for Normality
shapiro.test(win_inf[,1]) #Data is significantly different from a normal distribution - it is non normal
qqline(win_inf[,1], col = "steelblue", lwd = 2)
#Resistance
win_res <- (win_import[,12:22])
#Testing for Normality
shapiro.test(win_res[,1]) #Data is significantly different from a normal distribution - it is non-normal
qqline(win_res[,1], col = "steelblue", lwd = 2)
#Shannon's
win_shan <- round((win_import[,23:33]), 3)
win_shan[is.na(win_shan)] <- 0
win_shan <- win_shan[rowSums(win_shan[, -1]) > 0, ]
#Average Antibiotics
win_avganti <- round((win_import[,34:44]), 3)
# Resistance --------------------------------------------------------------
win_res <- (win_import[,12:22])
inc_res <- win_res[,c(1:11)]
m_res <- melt(inc_res, measure.vars = colnames(inc_res))
prop_vec <- data.frame("intervention" = unique(m_res$variable),
"prop_inc" = NA,
"95_quant" = NA )
m_win_import_change <- melt(win_import_change, measure.vars = colnames(win_import_change))
for(i in 1:11) {
prop_1000 <- win_import_change[,i+11]
prop_vec[i,2] <- length(prop_1000[prop_1000 == -1000])/sum(!is.na(prop_1000))
}
p <- ggplot(m_res, aes(x=factor(variable), y=value)) + geom_boxplot()
prop_vec[,3] <- ggplot_build(p)$data[[1]]$ymax
#win_res[is.na(win_res)] <- 0
win_res_trans <- t(apply(win_res, 1, function(x) {
val = max(x, na.rm = T)
x[x != val] <- 0
x[x == val] <- 1
return(x)}
))
prop_win_res <- data.frame("Resistance" = colSums(win_res_trans, na.rm = T)/nrow(win_res_trans),
"Interventions" = as.factor(c("FT", "ST (HR)", "ST (MR1)","ST (MR2)",
"ST (LR)",
"DT (1Rd)", "DT (2Rd)",
"DT (3Rd)", "DT (4Rd)",
"DT (5Rd)", "DT (6Rd)")))
prop_win_res$Interventions <- factor(prop_win_res$Interventions, levels = c(prop_win_res$Interventions))
prop_win_res$Color <- "black"
prop_win_res[prop_win_res$Resistance == max(prop_win_res$Resistance),3] <- "white"
#Win Heat Map
win_res_p <- ggplot(prop_win_res, aes(Interventions, "")) + theme_bw() +
geom_tile(aes(fill = Resistance)) +
geom_text(aes(label=Resistance, color = Interventions)) +
scale_colour_manual(values=prop_win_res$Color) +
scale_fill_distiller(palette ="Blues", direction = 1) +
scale_x_discrete(name = "", expand = c(0, 0))  +
scale_y_discrete(name = "", expand = c(0, 0)) +
guides(fill = guide_colorbar(title = "Probability that Intervention Wins",
title.position = "left", title.vjust = 1,
# draw border around the legend
frame.colour = "black",
barwidth = 15,
barheight = 1), color = "none") +
theme(strip.background = element_blank(), axis.text=element_text(size=11),
strip.text = element_blank(), legend.position="bottom",
axis.text.x = element_text(angle = 0, hjust=0.5), axis.text.y = element_blank(), axis.ticks.y = element_blank(),
plot.margin = unit(c(0,1,0,1.75), "cm"))
#Box Plot
box_res <- ggplot(m_res, aes(x=variable, y=value, fill = variable, alpha = variable)) + coord_cartesian(ylim=c(-1.5, 2)) +
geom_boxplot(outlier.shape = NA, show.legend = FALSE, fill = "red") + theme_bw() + labs(y = "Decrease in Resistance (%)", x = "") +
scale_alpha_manual(values=  prop_vec$prop_inc) +
theme(legend.position= "bottom", legend.text=element_text(size=11), legend.title =element_text(size=12), axis.text=element_text(size=11),
axis.title.y=element_text(size=12), axis.title.x= element_blank(), plot.margin = unit(c(0.3,1,0,1), "cm"),
legend.spacing.x = unit(0.3, 'cm'), axis.text.x = element_blank(), axis.ticks.x = element_blank()) +
scale_x_discrete(labels= c("FT", "ST (HR)", "ST (MR1)","ST (MR2)",
"ST (LR)",
"DT (1Rd)", "DT (2Rd)",
"DT (3Rd)", "DT (4Rd)",
"DT (5Rd)", "DT (6Rd)"))
comb_res <- ggarrange(box_res, win_res_p, ncol =1, nrow= 2, heights = c(1, 0.6), align = "v")
# Absolute Differences ----------------------------------------------------
#Infections Distribution
inc_inf <- win_inf[,c(1:11)]
inc_inf <- inc_inf[apply(inc_inf, 1, function(x) all(is.finite(x))), ]
keep <- Reduce(`&`, lapply(inc_inf, function(x) x >= quantile(x, .025)
& x <= quantile(x, .975)))
inc_inf <- inc_inf[keep,]
m_inf <- melt(inc_inf, measure.vars = colnames(inc_inf))
#Infections Wins
win_inf[is.na(win_inf)] <- 0
win_inf_trans <- t(apply(win_inf, 1, function(x) {
val = min(x)
x[x != val] <- 0
x[x == val] <- 1
return(x)}
))
prop_win_inf <- data.frame("Infections" = colSums(win_inf_trans)/nrow(win_inf_trans),
"Interventions" = as.factor(c("FT", "ST (HR)", "ST (MR1)","ST (MR2)",
"ST (LR)",
"DT (1Rd)", "DT (2Rd)",
"DT (3Rd)", "DT (4Rd)",
"DT (5Rd)", "DT (6Rd)")))
prop_win_inf$Interventions <- factor(prop_win_inf$Interventions, levels = c(prop_win_inf$Interventions))
prop_win_inf$Color <- "black"
prop_win_inf[prop_win_inf$Infections == max(prop_win_inf$Infections),3] <- "white"
#Win Heat Map
win_inf_p <- ggplot(prop_win_inf, aes(Interventions, "")) + theme_bw() +
geom_tile(aes(fill = Infections)) +
geom_text(aes(label=Infections, color = Interventions)) +
scale_colour_manual(values=prop_win_inf$Color) +
scale_fill_distiller(palette ="Blues", direction = 1) +
scale_x_discrete(name = "", expand = c(0, 0))  +
scale_y_discrete(name = "", expand = c(0, 0)) +
guides(fill = guide_colorbar(title = "Probability that Intervention Wins",
title.position = "left", title.vjust = 1,
# draw border around the legend
frame.colour = "black",
barwidth = 15,
barheight = 1), color = "none") +
theme(strip.background = element_blank(), axis.text=element_text(size=11),
strip.text = element_blank(), legend.position="bottom",
axis.text.x = element_text(angle = 0, hjust=0.5), axis.text.y = element_blank(), axis.ticks.y = element_blank(),
plot.margin = unit(c(0,1,0,1.75), "cm"))
#Box Plot
box_inf <- ggplot(m_inf, aes(x=variable, y=value, fill = variable, alpha = variable)) + coord_cartesian(ylim=c(-0.125, 0.175)) +
scale_alpha_manual(values=  prop_vec$prop_inc) +
geom_boxplot(outlier.shape = NA, show.legend = FALSE, fill = "red") + theme_bw() + labs(y = "Increase in Infections (%)", x = "") +
theme(legend.position= "bottom", legend.text=element_text(size=11), legend.title =element_text(size=12), axis.text=element_text(size=11),
axis.title.y=element_text(size=12), axis.title.x= element_blank(), plot.margin = unit(c(0.3,1,0,1), "cm"),
legend.spacing.x = unit(0.3, 'cm'), axis.text.x = element_blank(), axis.ticks.x = element_blank()) +
scale_x_discrete(labels= c("FT", "ST (HR)", "ST (MR1)","ST (MR2)",
"ST (LR)",
"DT (1Rd)", "DT (2Rd)",
"DT (3Rd)", "DT (4Rd)",
"DT (5Rd)", "DT (6Rd)"))
comb_inf <- ggarrange(box_inf, win_inf_p, ncol =1, nrow= 2, heights = c(1, 0.6), align = "v")
# Average Antibiontics Available ------------------------------------------
inc_avganti <- win_avganti[,c(1:11)]
m_avganti <- melt(inc_avganti, measure.vars = colnames(inc_avganti))
win_avganti[is.na(win_avganti)] <- 0
win_avganti <- win_avganti[rowSums(win_avganti[, -1]) > 0, ]
win_avganti_trans <- t(apply(win_avganti, 1, function(x) {
val = max(x)
x[is.na(x)] <- 0
x[x != val] <- 0
x[x == val] <- 1
return(x)}
))
prop_win_avganti <- data.frame("Average_Anti" = round(colSums(win_avganti_trans)/nrow(win_avganti_trans),3),
"Interventions" = as.factor(c("FT", "ST (HR)", "ST (MR1)","ST (MR2)",
"ST (LR)",
"DT (1Rd)", "DT (2Rd)",
"DT (3Rd)", "DT (4Rd)",
"DT (5Rd)", "DT (6Rd)")))
prop_win_avganti$Interventions <- factor(prop_win_avganti$Interventions, levels = c(prop_win_avganti$Interventions))
prop_win_avganti$Color <- "black"
prop_win_avganti[prop_win_avganti$Average_Anti == max(prop_win_avganti$Average_Anti),3] <- "white"
#Win Heat Map
win_avganti_p <- ggplot(prop_win_avganti, aes(Interventions, "")) + theme_bw() +
geom_tile(aes(fill = Average_Anti)) +
geom_text(aes(label=Average_Anti, color = Interventions)) +
scale_colour_manual(values=prop_win_avganti$Color) +
scale_fill_distiller(palette ="Blues", direction = 1) +
scale_x_discrete(name = "", expand = c(0, 0))  +
scale_y_discrete(name = "", expand = c(0, 0)) +
guides(fill = guide_colorbar(title = "Probability that Intervention Wins",
title.position = "left", title.vjust = 1,
# draw border around the legend
frame.colour = "black",
barwidth = 15,
barheight = 1), color = "none") +
theme(strip.background = element_blank(), axis.text=element_text(size=11),
strip.text = element_blank(), legend.position="bottom",
axis.text.x = element_text(angle = 0, hjust=0.5), axis.text.y = element_blank(), axis.ticks.y = element_blank(),
plot.margin = unit(c(0,1,0,1.35), "cm"))
#Box Plot
box_avganti <- ggplot(m_avganti, aes(x=variable, y=value, fill = variable, alpha = variable)) + coord_cartesian(ylim=c(-0.001, 3)) +
geom_boxplot(outlier.shape = NA, show.legend = FALSE, fill = "red") + theme_bw() + labs(y = "Average Antibiotics Available", x = "") +
scale_alpha_manual(values=  prop_vec$prop_inc) +
theme(legend.position= "bottom", legend.text=element_text(size=11), legend.title =element_text(size=12), axis.text=element_text(size=11),
axis.title.y=element_text(size=12), axis.title.x= element_blank(), plot.margin = unit(c(0.3,1,0,2), "cm"),
legend.spacing.x = unit(0.3, 'cm'), axis.text.x = element_blank(), axis.ticks.x = element_blank()) +
scale_x_discrete(labels= c("FT", "ST (HR)", "ST (MR1)","ST (MR2)",
"ST (LR)",
"DT (1Rd)", "DT (2Rd)",
"DT (3Rd)", "DT (4Rd)",
"DT (5Rd)", "DT (6Rd)"))
comb_avg_anti <- ggarrange(box_avganti, win_avganti_p, ncol =1, nrow= 2, heights = c(1, 0.6), align = "v")
# Shannon's ---------------------------------------------------------------
diff_shan <- win_shan[,c(1:11)]
m_shan <- melt(diff_shan, measure.vars = colnames(diff_shan))
win_shan[is.na(win_shan)] <- 0
win_shan <- win_shan[rowSums(win_shan[, -1]) > 0, ]
win_shan_trans <- t(apply(win_shan, 1, function(x) {
val = max(x)
x[is.na(x)] <- 0
x[x != val] <- 0
x[x == val] <- 1
return(x)}
))
prop_win_shan <- data.frame("Shannon_Index" = round(colSums(win_shan_trans)/nrow(win_shan_trans),3),
"Interventions" = as.factor(c("FT", "ST (HR)", "ST (MR1)","ST (MR2)",
"ST (LR)",
"DT (1Rd)", "DT (2Rd)",
"DT (3Rd)", "DT (4Rd)",
"DT (5Rd)", "DT (6Rd)")))
prop_win_shan$Interventions <- factor(prop_win_shan$Interventions, levels = c(prop_win_shan$Interventions))
prop_win_shan$Color <- "black"
prop_win_shan[prop_win_shan$Shannon_Index == max(prop_win_shan$Shannon_Index),3] <- "white"
#Win Heat Map
win_shan_p <- ggplot(prop_win_shan, aes(Interventions, "")) + theme_bw() +
geom_tile(aes(fill = Shannon_Index)) +
geom_text(aes(label=Shannon_Index, color = Interventions)) +
scale_colour_manual(values=prop_win_shan$Color) +
scale_fill_distiller(palette ="Blues", direction = 1) +
scale_x_discrete(name = "", expand = c(0, 0))  +
scale_y_discrete(name = "", expand = c(0, 0)) +
guides(fill = guide_colorbar(title = "Probability that Intervention Wins",
title.position = "left", title.vjust = 1,
# draw border around the legend
frame.colour = "black",
barwidth = 15,
barheight = 1), color = "none") +
theme(strip.background = element_blank(), axis.text=element_text(size=11),
strip.text = element_blank(), legend.position="bottom",
axis.text.x = element_text(angle = 0, hjust=0.5), axis.text.y = element_blank(), axis.ticks.y = element_blank(),
plot.margin = unit(c(0,1,0,1.8), "cm"))
#Box Plot
box_shan <- ggplot(m_shan, aes(x=variable, y=value, fill = variable, alpha = variable)) +
geom_boxplot(outlier.shape = NA, show.legend = FALSE, fill = "red") + theme_bw() + labs(y = "Shannon's Index", x = "") +
scale_y_continuous(expand = c(0,0)) +
scale_alpha_manual(values=  prop_vec$prop_inc) +
theme(legend.position= "bottom", legend.text=element_text(size=11), legend.title =element_text(size=12), axis.text=element_text(size=11),
axis.title.y=element_text(size=12), axis.title.x= element_blank(), plot.margin = unit(c(0.3,1,0,1), "cm"),
legend.spacing.x = unit(0.3, 'cm'), axis.text.x = element_blank(), axis.ticks.x = element_blank()) +
scale_x_discrete(labels= c("FT", "ST (HR)", "ST (MR1)","ST (MR2)",
"ST (LR)",
"DT (1Rd)", "DT (2Rd)",
"DT (3Rd)", "DT (4Rd)",
"DT (5Rd)", "DT (6Rd)"))
comb_shan <- ggarrange(box_shan, win_shan_p, ncol =1, nrow= 2, heights = c(1, 0.6), align = "v")
# Combine the Plots Together ----------------------------------------------
test <- ggarrange(comb_res, comb_inf,
comb_avg_anti, labels= c("A", "B", "C"), font.label=list(color="black",size=20) ,nrow = 3, ncol = 1, align="hv",
heights = c(0.1, 0.1, 0.1), common.legend = T)
ggsave(test, filename = "test_full.png", dpi = 300, width = 9, height = 12, units = "in",
path = "/Users/amorgan/Desktop")
ggsave(comb_shan, filename = "shan_full.png", dpi = 300, width = 9, height = 3.5, units = "in",
path = "/Users/amorgan/Desktop")
prop_vec$prop_inc
365*2
library("deSolve"); library("ggplot2"); library("reshape2"); library("ggpubr")
rm(list=ls())
setwd("/Users/amorgan/Documents/PostDoc/Diff_Tax_Analysis/Theoretical_Analysis/Interpolat_Diff_Tax/Model_Fit/Model_Output")
# ODEs --------------------------------------------------------------------
amr <- function(t, y, parms, sigma_use1, sigma_use2, sigma_use3) {
with(as.list(c(y, parms)), {
#Specify the time-varying functions
sigma_use1 <- sigma_func1(t)
sigma_use2 <- sigma_func2(t)
sigma_use3 <- sigma_func3(t)
#ODES Below
dX = lambda - lambda*X - beta*X*(Wt + R1*c1 + R2*c2 + R3*c3 + R12*c12 + R13*c13 + R23*c23 + R123*c123) +
r_wt*Wt*(1 - (sigma_use1 + sigma_use2 + sigma_use3)) + r_r*R1*(1-(sigma_use2 + sigma_use3)) + r_r*R2*(1-(sigma_use1 + sigma_use3)) + r_r*R3*(1-(sigma_use1 + sigma_use2)) +
r_rr*R12*(1-sigma_use3) + r_rr*R13*(1-sigma_use2) + r_rr*R23*(1-sigma_use1) +
r_rrr*R123 +
r_t*(1-rho)*(Wt*(sigma_use1 + sigma_use2 + sigma_use3) + R1*(sigma_use2 + sigma_use3) +
R2*(sigma_use1 + sigma_use3) + R3*(sigma_use1 + sigma_use2) +
R12*sigma_use3 + R13*sigma_use2 + R23*sigma_use1)
dWt = - lambda*Wt + beta*X*Wt - r_wt*Wt*(1 - (sigma_use1 + sigma_use2 + sigma_use3)) - r_t*Wt*(1-rho)*(sigma_use1 + sigma_use2 + sigma_use3) +
eta_rw*(R1 + R2 + R3 + R12 + R13 + R23 + R123)*(1 - (sigma_use1 + sigma_use2 + sigma_use3)) -
eta_wr*Wt*rho*(sigma_use1 + sigma_use2 + sigma_use3)
dR1 = - lambda*R1 + beta*X*R1*c1 - r_t*(1-rho)*(sigma_use2 + sigma_use3)*R1 - r_r*(1-(sigma_use2 + sigma_use3))*R1 - eta_rr*R1*rho*sigma_use2 -
eta_rr*R1*rho*sigma_use3 - eta_rw*R1*(1 - (sigma_use1 + sigma_use2 + sigma_use3)) + eta_wr*rho*Wt*sigma_use1
dR2 = - lambda*R2 + beta*X*R2*c2 - r_t*(1-rho)*(sigma_use1 + sigma_use3)*R2 - r_r*(1-(sigma_use1 + sigma_use3))*R2 - eta_rr*R2*rho*sigma_use1 -
eta_rr*R2*rho*sigma_use3 - eta_rw*R2*(1 - (sigma_use1 + sigma_use2 + sigma_use3)) + eta_wr*rho*Wt*sigma_use2
dR3 = - lambda*R3 + beta*X*R3*c3 - r_t*(1-rho)*(sigma_use1 + sigma_use2)*R3 - r_r*(1-(sigma_use1 + sigma_use2))*R3 - eta_rr*R3*rho*sigma_use1 -
eta_rr*R3*rho*sigma_use2 - eta_rw*R3*(1 - (sigma_use1 + sigma_use2 + sigma_use3)) + eta_wr*rho*Wt*sigma_use3
dR12 = - lambda*R12 + beta*X*R12*c12 - r_t*(1-rho)*sigma_use3*R12 - r_rr*(1-sigma_use3)*R12 - eta_rrr*R12*rho*sigma_use3 -
eta_rw*R12*(1 - (sigma_use1 + sigma_use2 + sigma_use3)) + eta_rr*R1*rho*sigma_use2 + eta_rr*R2*rho*sigma_use1
dR13 = - lambda*R13 + beta*X*R13*c13 - r_t*(1-rho)*sigma_use2*R13 - r_rr*(1-sigma_use2)*R13 - eta_rrr*R13*rho*sigma_use2 -
eta_rw*R13*(1 - (sigma_use1 + sigma_use2 + sigma_use3)) + eta_rr*R1*rho*sigma_use3 + eta_rr*R3*rho*sigma_use1
dR23 = - lambda*R23 + beta*X*R23*c23 - r_t*(1-rho)*sigma_use1*R23 - r_rr*(1-sigma_use1)*R23 - eta_rrr*R23*rho*sigma_use1 -
eta_rw*R23*(1 - (sigma_use1 + sigma_use2 + sigma_use3)) + eta_rr*R2*rho*sigma_use3 + eta_rr*R3*rho*sigma_use2
dR123 = - lambda*R123 + beta*X*R123*c123 - r_rrr*R123 - eta_rw*R123*(1 - (sigma_use1 + sigma_use2 + sigma_use3)) +
eta_rrr*rho*(sigma_use3*R12 + sigma_use2*R13 + sigma_use1*R23)
return(list(c(dX,dWt,
dR1,dR2,dR3,
dR12,dR13,dR23,
dR123)))
})
}
# Extract Sigmas for the ApproxFun Function -------------------------------
approx_sigma <- function(sigma_mat){
usage = data.frame("time" = seq(0,10000),
"PopUsage1" = c(rep(sigma_mat[1,1], 3000),
rep(sigma_mat[1,2], 365*3), rep(sigma_mat[1,3], 365*3), rep(sigma_mat[1,4], 365*3),
rep(sigma_mat[1,5], 365*3), rep(sigma_mat[1,6], 365*3), rep(sigma_mat[1,7], 10001 - (3000 + (365*3)*5))),
"PopUsage2" = c(rep(sigma_mat[2,1], 3000),
rep(sigma_mat[2,2], 365*3), rep(sigma_mat[2,3], 365*3), rep(sigma_mat[2,4], 365*3),
rep(sigma_mat[2,5], 365*3), rep(sigma_mat[2,6], 365*3), rep(sigma_mat[2,7], 10001 - (3000 + (365*3)*5))),
"PopUsage3" = c(rep(sigma_mat[3,1], 3000),
rep(sigma_mat[3,2], 365*3), rep(sigma_mat[3,3], 365*3), rep(sigma_mat[3,4], 365*3),
rep(sigma_mat[3,5], 365*3), rep(sigma_mat[3,6], 365*3), rep(sigma_mat[3,7], 10001 - (3000 + (365*3)*5))))
return(usage)
}
# ODE Wrapper Function ----------------------------------------------------
ode_wrapper <- function(times, y, parms, func, approx_sigma) {
sigma_mat = matrix(c(rep(parms[["sigma1"]], 7),
rep(parms[["sigma2"]], 7),
rep(parms[["sigma3"]], 7)),
nrow = 3, ncol = 7, byrow = T)
eff_tax <- parms[["eff_tax"]]; PED <- parms[["PED"]]
if(parms[["int_round"]] > 0 ) {
for(i in 1:parms[["int_round"]]) {
stor_sigma <- sigma_mat[,i]
sigma_mat[,(i+1):7] = c(stor_sigma[1]*(1 + ((eff_tax[1,i]*PED[1,1]) + (eff_tax[2,i]*PED[2,1]) + (eff_tax[3,i]*PED[3,1]))),
stor_sigma[2]*(1 + ((eff_tax[1,i]*PED[1,2]) + (eff_tax[2,i]*PED[2,2]) + (eff_tax[3,i]*PED[3,2]))),
stor_sigma[3]*(1 + ((eff_tax[1,i]*PED[1,3]) + (eff_tax[2,i]*PED[2,3]) + (eff_tax[3,i]*PED[3,3]))))
sigma_mat[,(i+1):7][sigma_mat[,(i+1)] < 0.01] <- 0.01
if(colSums(sigma_mat)[i+1] > 1) {
sigma_mat[,(i+1):7] <- sigma_mat[,i+1]/(sum(sigma_mat[,i+1])+0.01)
}
}
}
parms[["sigma_mat"]] <- sigma_mat
sigma_data <- approx_sigma(sigma_mat)
sigma_func1 <<- approxfun(sigma_data[,c(1,2)], rule = 2)
sigma_func2 <<- approxfun(sigma_data[,c(1,3)], rule = 2)
sigma_func3 <<- approxfun(sigma_data[,c(1,4)], rule = 2)
#Run the model
out <- data.frame(ode(y = init, func = func, times = times, parms = parms))
n_data <- ncol(out)-1
timing <- t(sapply(1:n_data, function(x)  out[max(which(!is.na(out[,x+1]))),]))
if(timing[1,1] != tail(times,1)) {
for(i in 1:n_data){
out[seq(timing[[1]]+2,tail(times,1)+1),i+1] <- timing[i,i+1]
}
}
out[out < 1e-10] <- 0
return(list(out, parms))
}
# Function to Aggregate Resistance ----------------------------------------
agg_func <- function(data) {
agg_data <- data.frame("time" = data$time,
"Susc" = data$X,
"WT" = data$Wt,
"R1" = data$R1 + data$R12 + data$R13 + data$R123,
"R2" = data$R2 + data$R12 + data$R23 + data$R123,
"R3" = data$R3 + data$R13 + data$R23 + data$R123)
return(agg_data)
}
# Single Taxation Function ------------------------------------------------
single_tax <- function(res_order, tax, parms, init, func, agg_func, ode_wrapper, approx_sigma) {
#First Run
parms[["base_tax"]] <- tax
run_1rd <- agg_func(ode_wrapper(y = init, func = func, times = seq(0, parms[["t_n"]]), parms = parms, approx_sigma)[[1]])
values_1rd <- tail(run_1rd, 1)[4:6]
res_order_vec <- c(names(values_1rd)[which.max(values_1rd)],
names(values_1rd)[setdiff(1:3, c(which.min(values_1rd), which.max(values_1rd)))],
names(values_1rd)[which.min(values_1rd)])[res_order]
parms[["eff_tax"]][as.numeric(substr(res_order_vec, 2, 2)), c(1:6)] <- as.numeric(parms[["base_tax"]])
parms[["int_round"]] <- 1
#Real Model Run
run_real <- ode_wrapper(y = init, func = func, times = seq(0, 10000), parms = parms, approx_sigma)
return(run_real)
}
# Dual Model --------------------------------------------------------------
multi_int_fun <- function(int_gen, time_between, parms, init, func, agg_func, ode_wrapper, approx_sigma){
parms["time_between"] <- time_between
#First Run
run_1rd <- agg_func(ode_wrapper(y = init, func = func, times = seq(0, parms[["t_n"]]), parms = parms, approx_sigma)[[1]])
values_1rd <- tail(run_1rd, 1)[4:6]
low_char_1rd <- names(values_1rd)[which.min(values_1rd)]
high_char_1rd <- names(values_1rd)[which.max(values_1rd)]
med_char_1rd <- names(values_1rd)[setdiff(1:3, c(which.min(values_1rd), which.max(values_1rd)))]
parms[["eff_tax"]][as.numeric(substr(low_char_1rd, 2, 2)), c(1:6)] <- as.numeric((parms[["base_tax"]]*(values_1rd[low_char_1rd]/values_1rd[med_char_1rd])))
parms[["eff_tax"]][as.numeric(substr(high_char_1rd, 2, 2)), c(1:6)] <- as.numeric((parms[["base_tax"]]*(values_1rd[high_char_1rd]/values_1rd[med_char_1rd])))
parms[["eff_tax"]][as.numeric(substr(med_char_1rd, 2, 2)), c(1:6)] <- as.numeric((parms[["base_tax"]]*(values_1rd[med_char_1rd]/values_1rd[med_char_1rd])))
parms[["eff_tax"]][parms[["eff_tax"]] < 0.00001] <- 0
#First Round of Diff Taxation
parms[["int_round"]] <- 1
if(int_gen > 1) {
#All Rounds Above 1
for(i in 2:int_gen) {
parms[["int_round"]] <- i-1
run <- agg_func(ode_wrapper(y = init, func = func, times = seq(0, parms[["t_n"]] + (parms[["time_between"]]*(i-1))), parms = parms, approx_sigma)[[1]])
values <- tail(run, 1)[4:6]
if(values[1] == 0 & values[2] == 0 & values[3] == 0) {
parms[["eff_tax"]][,i] <- 0
} else {
if(max(values) == min(values)) {
parms[["eff_tax"]][c(1:3), c(i:6)] <- as.numeric((parms[["base_tax"]]*(tail(run[names(values)[which.min(values)]],1)/values_1rd[med_char_1rd])))
} else {
low_char <- names(values)[which.min(values)]
high_char <- names(values)[which.max(values)]
med_char <- names(values)[setdiff(1:3, c(which.min(values), which.max(values)))]
parms[["eff_tax"]][as.numeric(substr(low_char, 2, 2)), c((i):6)] <- as.numeric((parms[["base_tax"]]*(tail(run[low_char],1)/values_1rd[med_char_1rd])))
parms[["eff_tax"]][as.numeric(substr(high_char, 2, 2)), c((i):6)] <- as.numeric((parms[["base_tax"]]*(tail(run[high_char],1)/values_1rd[med_char_1rd])))
parms[["eff_tax"]][as.numeric(substr(med_char, 2, 2)), c((i):6)] <- as.numeric((parms[["base_tax"]]*(tail(run[med_char],1)/values_1rd[med_char_1rd])))
}
parms[["eff_tax"]][parms[["eff_tax"]] < 0.00001] <- 0
}
parms[["int_round"]] <- i
}
}
out_run <- ode_wrapper(y = init, func = func, times = seq(0, 10000), parms = parms, approx_sigma)
return(out_run)
}
# Baseline Parms ----------------------------------------------------------
post_dist_names <- grep("ABC_v1_",
list.files("/Users/amorgan/Documents/PostDoc/Diff_Tax_Analysis/Theoretical_Analysis/Interpolat_Diff_Tax/Model_Fit/Model_Output"), value = TRUE)
post_dist <- lapply(post_dist_names, read.csv)
post_dist <- mapply(cbind, post_dist, "gen" = sapply(1:length(post_dist), function(x) paste0("gen_", x)),
SIMPLIFY=F)
post_dist <- do.call("rbind", post_dist)
maps_est <- colMeans(post_dist[post_dist$gen == tail(unique(post_dist$gen),1),][,1:11])
init <- c(X = 0.99, Wt = 1-0.99, R1 = 0, R2 = 0, R3 = 0,
R12 = 0, R13 = 0, R23 = 0,
R123 = 0)
parms = list(lambda = 1/365*(2), int_round = 1,
beta = 5, sigma1 = 0.25, sigma2 = 0.25, sigma3 = 0.25,
r_wt = 1/12, r_r = 1/10,  r_rr = 1/9,  r_rrr = 1/8,
r_t = 1/7, eta_wr = 0.3, eta_rw = 0.04,
eta_rr = 0.01, eta_rrr = 0.01,
c1 = 0.945, c2 = 0.91, c3 = 0.85,
c12 = 0.845, c13 = 0.81, c23 = 0.75,
c123 = 0.7,
PED = matrix(c(-1, 0.5, 0.5,
0.5, -1, 0.5,
0.5, 0.5, -1), #Be aware of this matrix
nrow = 3, ncol = 3, byrow = T),
eff_tax = matrix(c(0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0),
nrow = 3, ncol = 6, byrow = T),
sigma_mat = matrix(c(0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0),
nrow = 3, ncol = 7, byrow = T),
t_n = 3000, time_between = Inf, rho = 0.05, base_tax = 0.5)
parms = list(lambda = 1/365*(2), int_round = 1,
beta = maps_est["beta"],
sigma1 = 0.26, sigma2 = 0.25, sigma3 = 0.24,
r_wt = 1/12, r_r = 1/10,  r_rr = 1/9,  r_rrr = 1/8,
r_t = 1/7,
eta_wr = maps_est["eta_wr"],
eta_rw = maps_est["eta_rw"],
eta_rr = maps_est["eta_rr_rrr"], eta_rrr = maps_est["eta_rr_rrr"],
c1 = 0.9, c2 = 0.9, c3 = 0.9,
c12 = 0.8, c13 = 0.8, c23 = 0.8,
c123 = 0.7,
PED = matrix(c(-1, 0.5, 0.5,
0.5, -1, 0.5,
0.5, 0.5, -1), #Be aware of this matrix
nrow = 3, ncol = 3, byrow = T),
eff_tax = matrix(c(0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0),
nrow = 3, ncol = 6, byrow = T),
t_n = 3000, time_between = Inf, rho = 0.05, base_tax = 0.5)
parms = list(lambda = 1/365*(2), int_round = 1,
beta = maps_est["beta"],
sigma1 = 0.25, sigma2 = 0.25, sigma3 = 0.25,
r_wt = 1/12, r_r = 1/10,  r_rr = 1/9,  r_rrr = 1/8,
r_t = 1/7,
eta_wr = maps_est["eta_wr"],
eta_rw = maps_est["eta_rw"],
eta_rr = maps_est["eta_rr_rrr"], eta_rrr = maps_est["eta_rr_rrr"],
c1 = maps_est["c1"], c2 = maps_est["c2"],
c3 = maps_est["c3"],
c12 = maps_est["c12"], c13 = maps_est["c13"],
c23 = maps_est["c23"],
c123 = maps_est["c123"],
PED = matrix(c(-1, 0.4, 0.4,
0.4, -1, 0.4,
0.4, 0.4, -1), #Be aware of this matrix
nrow = 3, ncol = 3, byrow = T),
eff_tax = matrix(c(0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0),
nrow = 3, ncol = 6, byrow = T),
t_n = 3000, time_between = Inf, rho = 0.05, base_tax = 0.5)
maps_est
?geom_label
library("deSolve"); library("ggplot2"); library("reshape2"); library("ggpubr"); library("rootSolve"); library("viridis"); library("cowplot")
rm(list=ls())
setwd("/Users/amorgan/Documents/PostDoc/Diff_Tax_Analysis/Theoretical_Analysis/Interpolat_Diff_Tax/Euler_Run/Model_Output")
# Import in Dataset -------------------------------------------------------
win_import <- readRDS("MDR_run_interpol.RDS")
