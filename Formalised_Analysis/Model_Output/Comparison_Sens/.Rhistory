0.5, #c12
0.5, #c13
0.5, #c14
0.5, #c23
0.5, #c24
0.5, #c34
0.5, #c123
0.5, #c124
0.5, #c134
0.5, #c234
0.5, #c1234
0, #rho
0) #baseline tax
high_parm <- c(1/36.5*(2), #lambda
10, #beta
1, #sigma1
1, #sigma2
1, #sigma3
1, #sigma4
1/2, #r_wt
1/2, #r_r
1/2, #r_rr
1/2, #r_rrr
1/2, #r_rrrr
1/2, #r_t
3, #eta_wr
0.4, #eta_rw
0.1, #eta_rr
0.1, #eta_rrr
0.1, #eta_rrrr
1, #c1
1, #c2
1, #c3
1, #c4
1, #c12
1, #c13
1, #c14
1, #c23
1, #c24
1, #c34
1, #c123
1, #c124
1, #c134
1, #c234
1, #c1234
1, #rho
1) #baseline tax
#Creating the Parm Dataframe
parm_data <- data.frame(t(replicate(10000, runif(34, low_parm, high_parm))))
colnames(parm_data) <- c("lambda", "beta", "sigma1", "sigma2", "sigma3",  "sigma4",
"r_wt", "r_r", "r_rr", "r_rrr","r_rrrr","r_t",
"eta_wr", "eta_rw", "eta_rr", "eta_rrr", "eta_rrrr",
"c1", "c2", "c3","c4", "c12", "c13", "c14", "c23","c24","c34",
"c123", "c124","c134", "c234", "c1234",
"rho", "base_tax")
for(i in 1:nrow(parm_data)) {
if(sum(parm_data[c("sigma1", "sigma2", "sigma3", "sigma4")][i,]) > 1) {
parm_data[c("sigma1", "sigma2", "sigma3", "sigma4")][i,] <- parm_data[c("sigma1", "sigma2", "sigma3", "sigma4")][i,]/
(sum(parm_data[c("sigma1", "sigma2", "sigma3", "sigma4")][i,]) + runif(1, 0, 1))
}
}
parm_data[c("eta_wr", "eta_rw", "eta_rr", "eta_rrr", "eta_rrrr")] <- t(sapply(1:nrow(parm_data), function(x)
sort(as.numeric(parm_data[c("eta_wr", "eta_rw", "eta_rr", "eta_rrr", "eta_rrrr")][x,]), decreasing = T)))
parm_data[c("r_wt", "r_r", "r_rr", "r_rrr", "r_rrrr", "r_t")] <- t(sapply(1:nrow(parm_data), function(x)
sort(as.numeric(parm_data[c("r_wt", "r_r", "r_rr", "r_rrr", "r_rrrr", "r_t")][x,]), decreasing = F)))
parm_data[c("c1", "c2", "c3", "c4")] <- t(sapply(1:nrow(parm_data), function(x)
sample(sort(as.numeric(parm_data[c("c1", "c2", "c3","c4", "c12", "c13", "c14", "c23","c24","c34",
"c123", "c124","c134", "c234", "c1234")][x,]), decreasing = T)[1:4],
size = 4, replace = FALSE)))
parm_data[c("c12", "c13", "c14", "c23","c24","c34")] <-  t(sapply(1:nrow(parm_data), function(x)
sample(sort(as.numeric(parm_data[c("c1", "c2", "c3","c4", "c12", "c13", "c14", "c23","c24","c34",
"c123", "c124","c134", "c234", "c1234")][x,]), decreasing = T)[5:10],
size = 6, replace = FALSE)))
parm_data[c("c123", "c124","c134", "c234")] <-  t(sapply(1:nrow(parm_data), function(x)
sample(sort(as.numeric(parm_data[c("c1", "c2", "c3","c4", "c12", "c13", "c14", "c23","c24","c34",
"c123", "c124","c134", "c234", "c1234")][x,]), decreasing = T)[11:14],
size = 4, replace = FALSE)))
parm_data["c1234"] <- sapply(1:nrow(parm_data), function(x)
sort(as.numeric(parm_data[c("c1", "c2", "c3","c4", "c12", "c13", "c14", "c23","c24","c34",
"c123", "c124","c134", "c234", "c1234")][x,]), decreasing = T)[15])
parm_data_comb <- data.frame(parm_data, t_n = 3000,
time_between = Inf)
# Creating the Parallel Montonicity Function ------------------------------
mono_func <- function(n, parms_frame, init, amr_ode, usage_fun, multi_int_fun, low_parm, high_parm, agg_func, thresh) {
parms_base = as.list(parms_frame[n,])
parms_base = append(parms_base, parms["PED"]); parms_base = append(parms_base, parms["eff_tax"])
#Run Baseline
run_base <- remNA_func(data.frame(ode(y = init, func = amr_ode, times = seq(0, 10000), parms = parms_base, hmax = 1)))
run_base_agg <- agg_func(run_base)
values <- tail(run_base_agg, 1)
if(values[4] == 0 & values[5] == 0 & values[6] == 0 & values[7] == 0) {
while(values[4] == 0 & values[5] == 0 & values[6] == 0 & values[7] == 0) {
parms_base[c(1:34)] <- as.list(runif(34, low_parm, high_parm))
if(sum(unlist(parms_base[c("sigma1", "sigma2", "sigma3", "sigma4")])) > 1) {
parms_base[c("sigma1", "sigma2", "sigma3", "sigma4")] <- as.list(unlist(parms_base[c("sigma1", "sigma2", "sigma3", "sigma4")])/
(sum(unlist(parms_base[c("sigma1", "sigma2", "sigma3",  "sigma4")])) + runif(1, 0, 1)))
}
parms_base[c("eta_wr", "eta_rw", "eta_rr", "eta_rrr", "eta_rrrr")] <-
as.list(sort(as.numeric(parms_base[c("eta_wr", "eta_rw", "eta_rr", "eta_rrr", "eta_rrrr")]), decreasing = T))
parms_base[c("r_wt", "r_r", "r_rr", "r_rrr","r_rrrr", "r_t")] <-
as.list(sort(as.numeric(parms_base[c("r_wt", "r_r", "r_rr", "r_rrr","r_rrrr", "r_t")]), decreasing = F))
parms_base[c("c1", "c2", "c3", "c4")] <-
as.list(sample(sort(as.numeric(parms_base[c("c1", "c2", "c3","c4", "c12", "c13", "c14", "c23","c24","c34",
"c123", "c124","c134", "c234", "c1234")]), decreasing = T)[1:4]), size = 4, replace = F)
parms_base[c("c12", "c13", "c14", "c23","c24","c34")] <-
as.list(sample(sort(as.numeric(parms_base[c("c1", "c2", "c3","c4", "c12", "c13", "c14", "c23","c24","c34",
"c123", "c124","c134", "c234", "c1234")]), decreasing = T)[5:10]), size = 6, replace = F)
parms_base[c("c123", "c124","c134", "c234")] <-
as.list(sample(sort(as.numeric(parms_base[c("c1", "c2", "c3","c4", "c12", "c13", "c14", "c23","c24","c34",
"c123", "c124","c134", "c234", "c1234")]), decreasing = T)[11:14]), size = 4, replace = F)
parms_base["c1234"] <-
as.list(sort(as.numeric(parms_base[c("c1", "c2", "c3","c4", "c12", "c13", "c14", "c23","c24","c34",
"c123", "c124","c134", "c234", "c1234")]), decreasing = T)[15])
run_base <- remNA_func(data.frame(ode(y = init, func = amr_ode, times = seq(0, 10000), parms = parms_base, hmax = 1)))
run_base_agg <- agg_func(run_base)
values <- tail(run_base_agg, 1)
}
}
run <- run_base[run_base[,1] > parms_base[["t_n"]],]
run_base_agg <- run_base_agg[run_base_agg[,1] > parms_base[["t_n"]],]
#Identifying the order of the resistances
res_order_vec <- c(names(values[4:7])[which.max(values[4:7])],
names(values[4:7])[setdiff(1:4, c(which.min(values[4:7]), which.max(values[4:7])))][1],
names(values[4:7])[setdiff(1:4, c(which.min(values[4:7]), which.max(values[4:7])))][2],
names(values[4:7])[which.min(values[4:7])])
base_tot_inf <- signif(sum(run[3:18]), 5)
base_int_res <- signif(sum(rowMeans(run_base_agg[4:7]), 5))
#Need to calculate a different baseline for each scenario for antibiotic usage
store_vec_res <- c()
store_vec_inf <- c()
store_vec_shan <- c()
store_vec_avganti <- c()
for(i in 1:11){
parms = parms_base
if(i == 1) {
parms[["eff_tax"]][,] <- parms[["base_tax"]]
out <- remNA_func(data.frame(ode(y = init, func = amr_ode, times = seq(0, 10000), parms = parms, hmax = 1)))
}
if(i >= 2 & i <= 5) {
parms[["eff_tax"]][as.numeric(substr(res_order_vec[i-1], 2, 2)), c(1:6)] <- parms[["base_tax"]]
out <- remNA_func(data.frame(ode(y = init, func = amr_ode, times = seq(0, 10000), parms = parms, hmax = 1)))
}
if(i >= 6 & i <= 11) {
diff <- multi_int_fun(i-5, 365*3, parms, init, amr_ode, agg_func)
out <- diff[[1]]
parms <- diff[[2]]
}
data_temp <- out[out[,1] > parms[["t_n"]],]
data_temp_agg <- agg_func(data_temp)
out_vec <- signif(c(sum(data_temp[3:18]),
sum(rowMeans(data_temp_agg[4:7]))),5)
reduc_usage_vec <- sum(usage_fun(parms)[,7])
#Aggregation
out$aggR1 <- out$R1 + out$R12 + out$R13 + out$R14 + out$R123 + out$R124 + out$R134 + out$R1234
out$aggR2 <- out$R2 + out$R12 + out$R24 + out$R23 + out$R123 + out$R124 + out$R234 + out$R1234
out$aggR3 <- out$R3 + out$R13 + out$R23 + out$R34 + out$R123 + out$R134 + out$R234 + out$R1234
out$aggR4 <- out$R4 + out$R14 + out$R24 + out$R34 + out$R124 + out$R134 + out$R234 + out$R1234
#Determine the X% Thresholds that you want to be under
thresholds <- unlist(out[parms[["t_n"]]-1, 19:22]*thresh)
under_thresh <- sweep(out[out[,1] > parms[["t_n"]],][,19:22], 2, thresholds)
#Calculate the number of days you are under said threshold
under_50 <- c(nrow(under_thresh[under_thresh$aggR1 < 0,]),
nrow(under_thresh[under_thresh$aggR2 < 0,]),
nrow(under_thresh[under_thresh$aggR3 < 0,]),
nrow(under_thresh[under_thresh$aggR4 < 0,]))
#Find the Sum and make each value proportionate to one another
prop_vec <- sum(under_50) / (10000 - parms[["t_n"]])
prop_vec_shan <- under_50 / sum(under_50)
prop_vec_shan <- prop_vec_shan[prop_vec_shan != 0]
#Store Computation Vectors
store_vec_inf[i] <- (out_vec[1] - base_tot_inf)/reduc_usage_vec
store_vec_res[i] <- (base_int_res - out_vec[2])/reduc_usage_vec
store_vec_shan[i] <- -sum(sapply(1:length(prop_vec_shan), function(x) prop_vec_shan[x]*log(prop_vec_shan[x])))
store_vec_avganti[i] <- prop_vec
}
output <- c(store_vec_inf, store_vec_res, store_vec_shan,store_vec_avganti, parms_base[c(1:38)])
names(output) <- c("flat_inf", "singleHR_inf", "singleMR1_inf", "singleMR2_inf", "singleLR_inf", "diff1_inf", "diff2_inf", "diff3_inf", "diff4_inf", "diff5_inf", "diff6_inf",
"flat_res", "singleHR_res", "singleMR1_res", "singleMR2_res", "singleLR_res", "diff1_res", "diff2_res", "diff3_res", "diff4_res", "diff5_res", "diff6_res",
"flat_shan", "singleHR_shan", "singleMR1_shan", "singleMR2_shan", "singleLR_shan", "diff1_shan", "diff2_shan", "diff3_shan", "diff4_shan", "diff5_shan", "diff6_shan",
"flat_avganti", "singleHR_avganti", "singleMR_avganti", "singleMR2_avganti", "singleLR_avganti", "diff1_avganti", "diff2_avganti", "diff3_avganti", "diff4_avganti", "diff5_avganti", "diff6_avganti",
names(parms_base[c(1:38)]))
return(output)
}
# Run the Model ----------------------------------------------------------
start_time <- Sys.time()
test <- mclapply(1:10,
FUN = mono_func,
parms_frame = parm_data_comb,
init = c(X = 0.99, Wt = 1-0.99,
R1 = 0, R2 = 0, R3 = 0, R4 = 0,
R12 = 0, R13 = 0, R14 = 0, R23 = 0, R24 = 0, R34 = 0,
R123 = 0, R124 = 0, R134 = 0, R234 = 0,
R1234 = 0),
amr_ode = amr,
usage_fun = usage_fun,
multi_int_fun = multi_int_fun,
low_parm = low_parm,
high_parm = high_parm,
agg_func = agg_func,
thresh = 0.5,
mc.cores = 10)
test
comb_data_new
#Combine the Output into a "normal" looking dataframe
comb_data <- data.frame(do.call(rbind, test))
comb_data_new <- data.frame(matrix(NA, nrow = nrow(comb_data), ncol = 44))
for(i in 1:nrow(comb_data)) {
comb_data_new[i,] <- unlist(comb_data[i,1:44])
}
colnames(comb_data_new) <- colnames(comb_data)[1:44]
#Update the Parameter Set
parm_data_comb_new <- parm_data_comb
parm_data_comb_new[1:nrow(comb_data),1:34] <- comb_data[,45:78]
parm_list <- list()
for(i in 1:nrow(parm_data_comb_new)) {
p_list <- as.list(unlist(parm_data_comb_new[i,]))
p_list <- append(p_list, parms["eff_tax"])
p_list <- append(p_list, parms["PED"])
parm_list[[i]] <- p_list
}
View(comb_data_new)
library("deSolve"); library("ggplot2"); library("reshape2"); library("ggpubr"); library("rootSolve"); library("viridis"); library("cowplot")
rm(list=ls())
setwd("/Users/amorgan/Documents/PostDoc/Diff_Tax_Analysis/Theoretical_Analysis/Formalised_Analysis/Model_Output/Comparison_Sens")
# Import in Dataset -------------------------------------------------------
win_import_base <- readRDS("MDR_run_four.RDS")
win_import_075 <- readRDS("MDR_run_v5_075.RDS")
win_import_025 <- readRDS("MDR_run_v5_025.RDS")
for(i in seq_along(win_import)) {
win_import[[i]] <- as(win_import[[i]], class(win_import[[i]][[1]]))
}
library("deSolve"); library("ggplot2"); library("reshape2"); library("ggpubr"); library("rootSolve"); library("viridis"); library("cowplot")
rm(list=ls())
setwd("/Users/amorgan/Documents/PostDoc/Diff_Tax_Analysis/Theoretical_Analysis/Formalised_Analysis/Model_Output/Comparison_Sens")
# Import in Dataset -------------------------------------------------------
win_import_base <- readRDS("MDR_run_four.RDS")
win_import_075 <- readRDS("MDR_run_v5_075.RDS")
win_import_025 <- readRDS("MDR_run_v5_025.RDS")
# Altering Data Shannon's Index -------------------------------------------
win_shan <- data.frame("Interventions" = as.factor(c("Flat Tax", "Single Tax (HR)", "Single Tax (MR)",
"Single Tax (LR)",
"Diff Tax (1 Round)", "Diff Tax (2 Round)",
"Diff Tax (3 Round)", "Diff Tax (4 Round)",
"Diff Tax (5 Round)", "Diff Tax (6 Round)")),
"baseline" = round((win_import[,23:33]), 5),
"thresh_075" = round((win_import_075[,23:33]), 5),
"thresh_025" = round((win_import_025[,23:33]), 5))
library("deSolve"); library("ggplot2"); library("reshape2"); library("ggpubr"); library("rootSolve"); library("viridis"); library("cowplot")
rm(list=ls())
setwd("/Users/amorgan/Documents/PostDoc/Diff_Tax_Analysis/Theoretical_Analysis/Formalised_Analysis/Model_Output/Comparison_Sens")
# Import in Dataset -------------------------------------------------------
win_import_base <- readRDS("MDR_run_four.RDS")
win_import_075 <- readRDS("MDR_run_v5_075.RDS")
win_import_025 <- readRDS("MDR_run_v5_025.RDS")
# Altering Data Shannon's Index -------------------------------------------
win_shan <- data.frame("Interventions" = as.factor(c("Flat Tax", "Single Tax (HR)", "Single Tax (MR)",
"Single Tax (LR)",
"Diff Tax (1 Round)", "Diff Tax (2 Round)",
"Diff Tax (3 Round)", "Diff Tax (4 Round)",
"Diff Tax (5 Round)", "Diff Tax (6 Round)")),
"baseline" = round((win_import_base[,23:33]), 5),
"thresh_075" = round((win_import_075[,23:33]), 5),
"thresh_025" = round((win_import_025[,23:33]), 5))
win_shan
round((win_import_base[,23:33]), 5)
data.frame("Interventions" = as.factor(c("Flat Tax", "Single Tax (HR)", "Single Tax (MR)",
"Single Tax (LR)",
"Diff Tax (1 Round)", "Diff Tax (2 Round)",
"Diff Tax (3 Round)", "Diff Tax (4 Round)",
"Diff Tax (5 Round)", "Diff Tax (6 Round)")),
"baseline" = round((win_import_base[,23:33]), 5))
baseline <- data.frame("Interventions" = as.factor(c("Flat Tax", "Single Tax (HR)", "Single Tax (MR)",
"Single Tax (LR)",
"Diff Tax (1 Round)", "Diff Tax (2 Round)",
"Diff Tax (3 Round)", "Diff Tax (4 Round)",
"Diff Tax (5 Round)", "Diff Tax (6 Round)")),
"baseline" = round((win_import_base[,23:33]), 5))
baseline <- data.frame("Interventions" = as.factor(c("Flat Tax", "Single Tax (HR)", "Single Tax (MR)",
"Single Tax (LR)",
"Diff Tax (1 Round)", "Diff Tax (2 Round)",
"Diff Tax (3 Round)", "Diff Tax (4 Round)",
"Diff Tax (5 Round)", "Diff Tax (6 Round)")),
"baseline" = round((win_import_base[,23:33]), 5),
"group" = "baseline")
baseline
baseline <- melt(baseline, id.vars = "Interventions", measure.vars = colnames(baseline))
baseline <- data.frame("Interventions" = as.factor(c("Flat Tax", "Single Tax (HR)", "Single Tax (MR)",
"Single Tax (LR)",
"Diff Tax (1 Round)", "Diff Tax (2 Round)",
"Diff Tax (3 Round)", "Diff Tax (4 Round)",
"Diff Tax (5 Round)", "Diff Tax (6 Round)")),
"baseline" = round((win_import_base[,23:33]), 5))
baseline <- melt(baseline, id.vars = "Interventions", measure.vars = colnames(baseline))
data.frame("Interventions" = as.factor(c("Flat Tax", "Single Tax (HR)", "Single Tax (MR)",
"Single Tax (LR)",
"Diff Tax (1 Round)", "Diff Tax (2 Round)",
"Diff Tax (3 Round)", "Diff Tax (4 Round)",
"Diff Tax (5 Round)", "Diff Tax (6 Round)")),
"baseline" = round((win_import_base[,23:33]), 5))
baseline <- data.frame("Interventions" = as.factor(c("Flat Tax", "Single Tax (HR)", "Single Tax (MR)",
"Single Tax (LR)",
"Diff Tax (1 Round)", "Diff Tax (2 Round)",
"Diff Tax (3 Round)", "Diff Tax (4 Round)",
"Diff Tax (5 Round)", "Diff Tax (6 Round)")),
"baseline" = round((win_import_base[,23:33]), 5))
baseline
baseline <- data.frame("Interventions" = as.factor(c("Flat Tax", "Single Tax (HR)", "Single Tax (MR)",
"Single Tax (LR)",
"Diff Tax (1 Round)", "Diff Tax (2 Round)",
"Diff Tax (3 Round)", "Diff Tax (4 Round)",
"Diff Tax (5 Round)", "Diff Tax (6 Round)")),
round((win_import_base[,23:33]), 5))
baseline
baseline <- data.frame("Interventions" = as.factor(c("Flat Tax", "Single Tax (HR)", "Single Tax (MR)",
"Single Tax (LR)",
"Diff Tax (1 Round)", "Diff Tax (2 Round)",
"Diff Tax (3 Round)", "Diff Tax (4 Round)",
"Diff Tax (5 Round)", "Diff Tax (6 Round)")),
round((win_import_base[,23:33]), 5))
baseline <- data.frame(melt(baseline, id.vars = "Interventions", measure.vars = colnames(baseline)),
group = "baseline")
baseline <- data.frame("Interventions" = as.factor(c("Flat Tax", "Single Tax (HR)", "Single Tax (MR)",
"Single Tax (LR)",
"Diff Tax (1 Round)", "Diff Tax (2 Round)",
"Diff Tax (3 Round)", "Diff Tax (4 Round)",
"Diff Tax (5 Round)", "Diff Tax (6 Round)")),
round((win_import_base[,23:33]), 5))
melt(baseline, id.vars = "Interventions", measure.vars = colnames(baseline)[-1])
baseline <- data.frame("Interventions" = as.factor(c("Flat Tax", "Single Tax (HR)", "Single Tax (MR)",
"Single Tax (LR)",
"Diff Tax (1 Round)", "Diff Tax (2 Round)",
"Diff Tax (3 Round)", "Diff Tax (4 Round)",
"Diff Tax (5 Round)", "Diff Tax (6 Round)")),
round((win_import_base[,23:33]), 5))
baseline <- data.frame(melt(baseline, id.vars = "Interventions", measure.vars = colnames(baseline)[-1]),
group = "baseline")
baseline <- data.frame("Interventions" = as.factor(c("Flat Tax", "Single Tax (HR)", "Single Tax (MR)",
"Single Tax (LR)",
"Diff Tax (1 Round)", "Diff Tax (2 Round)",
"Diff Tax (3 Round)", "Diff Tax (4 Round)",
"Diff Tax (5 Round)", "Diff Tax (6 Round)")),
round((win_import_base[,23:33]), 5))
baseline <- data.frame(melt(baseline, id.vars = "Interventions", measure.vars = colnames(baseline)[-1]),
group = "baseline")
win_075 <- data.frame("Interventions" = as.factor(c("Flat Tax", "Single Tax (HR)", "Single Tax (MR)",
"Single Tax (LR)",
"Diff Tax (1 Round)", "Diff Tax (2 Round)",
"Diff Tax (3 Round)", "Diff Tax (4 Round)",
"Diff Tax (5 Round)", "Diff Tax (6 Round)")),
round((win_import_075[,23:33]), 5))
win_075 <- data.frame(melt(win_075, id.vars = "Interventions", measure.vars = colnames(win_075)[-1]),
group = "win_075")
win_025 <- data.frame("Interventions" = as.factor(c("Flat Tax", "Single Tax (HR)", "Single Tax (MR)",
"Single Tax (LR)",
"Diff Tax (1 Round)", "Diff Tax (2 Round)",
"Diff Tax (3 Round)", "Diff Tax (4 Round)",
"Diff Tax (5 Round)", "Diff Tax (6 Round)")),
round((win_import_025[,23:33]), 5))
win_025 <- data.frame(melt(win_025, id.vars = "Interventions", measure.vars = colnames(win_025)[-1]),
group = "win_025")
win_025
win_025
data.frame("Interventions" = as.factor(c("Flat Tax", "Single Tax (HR)", "Single Tax (MR)",
"Single Tax (LR)",
"Diff Tax (1 Round)", "Diff Tax (2 Round)",
"Diff Tax (3 Round)", "Diff Tax (4 Round)",
"Diff Tax (5 Round)", "Diff Tax (6 Round)")),
round((win_import_025[,23:33]), 5))
data.frame("Interventions" = as.factor(c("Flat Tax", "Single Tax (HR)", "Single Tax (MR)",
"Single Tax (LR)",
"Diff Tax (1 Round)", "Diff Tax (2 Round)",
"Diff Tax (3 Round)", "Diff Tax (4 Round)",
"Diff Tax (5 Round)", "Diff Tax (6 Round)")),
round((win_import_base[,22:33]), 5))
data.frame("Interventions" = as.factor(c("Flat Tax", "Single Tax (HR)", "Single Tax (MR)",
"Single Tax (LR)",
"Diff Tax (1 Round)", "Diff Tax (2 Round)",
"Diff Tax (3 Round)", "Diff Tax (4 Round)",
"Diff Tax (5 Round)", "Diff Tax (6 Round)")),
round((win_import_base[,23:33]), 5))
baseline <- data.frame(round((win_import_base[,23:33]), 5))
baseline <- data.frame(melt(baseline, measure.vars = colnames(baseline)),
group = "baseline")
baseline
baseline
data.frame(round((win_import_base[,23:33]), 5))
melt(?)
baseline <- data.frame(round((win_import_base[,23:33]), 5))
melt(baseline, measure.vars = colnames(baseline))
?melt
baseline <- data.frame(round((win_import_base[,23:33]), 5))
baseline
baseline[,1]
baseline[1,]
baseline <- data.frame(round((win_import_base[,23:33]), 5))
base.data.frame <- data.frame(ncol = 2, nrow = 0)
base.data.frame
base.data.frame <- data.frame(matrix(ncol = 2, nrow = 0))
base.data.frame
baseline <- data.frame(round((win_import_base[,23:33]), 5))
base.data.frame <- data.frame(matrix(ncol = 2, nrow = 0))
for(i in 1:11) {
base.data.frame <- rbind(base.data.frame, data.frame("variable" = colnames(baseline)[i],
"value" = baseline[i,]))
}
base.data.frame
baseline <- data.frame(round((win_import_base[,23:33]), 5))
base.data.frame <- data.frame(matrix(ncol = 2, nrow = 0))
for(i in 1:11) {
base.data.frame <- cbind(base.data.frame, data.frame("variable" = colnames(baseline)[i],
"value" = baseline[i,]))
}
colnames(baseline)[i]
baseline[i,]
as.numeric(baseline[i,])
baseline <- data.frame(round((win_import_base[,23:33]), 5))
base.data.frame <- data.frame(matrix(ncol = 2, nrow = 0))
for(i in 1:11) {
base.data.frame <- rbind(base.data.frame,
data.frame("variable" = colnames(baseline)[i],
"value" = as.numeric(baseline[i,])))
}
base.data.frame
library("deSolve"); library("ggplot2"); library("reshape2"); library("ggpubr"); library("rootSolve"); library("viridis"); library("cowplot")
rm(list=ls())
setwd("/Users/amorgan/Documents/PostDoc/Diff_Tax_Analysis/Theoretical_Analysis/Formalised_Analysis/Model_Output/Comparison_Sens")
# Import in Dataset -------------------------------------------------------
win_import_base <- readRDS("MDR_run_four.RDS")
win_import_075 <- readRDS("MDR_run_v5_075.RDS")
win_import_025 <- readRDS("MDR_run_v5_025.RDS")
# Altering Data Shannon's Index -------------------------------------------
#
baseline <- data.frame(round((win_import_base[,23:33]), 5))
base.data.frame <- data.frame(matrix(ncol = 2, nrow = 0))
for(i in 1:11) {
base.data.frame <- rbind(base.data.frame,
data.frame("variable" = colnames(baseline)[i],
"value" = as.numeric(baseline[i,]),
"group" = "baseline"))
}
#
win_075 <- data.frame(round((win_import_075[,23:33]), 5))
win_075.data.frame <- data.frame(matrix(ncol = 2, nrow = 0))
for(i in 1:11) {
win_075.data.frame <- rbind(win_075.data.frame,
data.frame("variable" = colnames(win_075)[i],
"value" = as.numeric(win_075[i,]),
"group" = "win_075"))
}
#
win_025 <- data.frame(round((win_import_025[,23:33]), 5))
win_025.data.frame <- data.frame(matrix(ncol = 2, nrow = 0))
for(i in 1:11) {
win_025.data.frame <- rbind(win_025.data.frame,
data.frame("variable" = colnames(win_025)[i],
"value" = as.numeric(win_025[i,]),
"group" = "win_025"))
}
win_025.data.frame
library("deSolve"); library("ggplot2"); library("reshape2"); library("ggpubr"); library("rootSolve"); library("viridis"); library("cowplot")
rm(list=ls())
setwd("/Users/amorgan/Documents/PostDoc/Diff_Tax_Analysis/Theoretical_Analysis/Formalised_Analysis/Model_Output/Comparison_Sens")
# Import in Dataset -------------------------------------------------------
win_import_base <- readRDS("MDR_run_four.RDS")
win_import_075 <- readRDS("MDR_run_v5_075.RDS")
win_import_025 <- readRDS("MDR_run_v5_025.RDS")
# Altering Data Shannon's Index -------------------------------------------
#
baseline_shan <- data.frame(round((win_import_base[,23:33]), 5))
base.data.frame_shan <- data.frame(matrix(ncol = 2, nrow = 0))
for(i in 1:11) {
base.data.frame_shan <- rbind(base.data.frame_shan,
data.frame("variable" = colnames(baseline_shan)[i],
"value" = as.numeric(baseline_shan[i,]),
"group" = "baseline"))
}
#
win_075_shan <- data.frame(round((win_import_075[,23:33]), 5))
win_075.data.frame_shan <- data.frame(matrix(ncol = 2, nrow = 0))
for(i in 1:11) {
win_075.data.frame_shan <- rbind(win_075.data.frame_shan,
data.frame("variable" = colnames(win_075_shan)[i],
"value" = as.numeric(win_075_shan[i,]),
"group" = "win_075"))
}
#
win_025_shan <- data.frame(round((win_import_025[,23:33]), 5))
win_025.data.frame_shan <- data.frame(matrix(ncol = 2, nrow = 0))
for(i in 1:11) {
win_025.data.frame_shan <- rbind(win_025.data.frame_shan,
data.frame("variable" = colnames(win_025_shan)[i],
"value" = as.numeric(win_025_shan[i,]),
"group" = "win_025"))
}
win_import_025[,23:33])
win_import_025[,23:28]
win_import_025
win_import_025[,23:33]
win_import_025[,22:33]
win_import_025[,21:33]
win_import_025[,21:30]
win_import_075[,21:30]
comb_shan <- rbind(base.data.frame_shan, win_075.data.frame_shan, win_025.data.frame_shan)
comb_shan
readRDS("MDR_run_four.RDS")
win_import_base[,21:30]
data.frame(round((win_import_base[,21:30]), 5))
win_import_base[,21:30]
win_import_base[,21:30]
data.frame(round((win_import_base[,21:30]), 5))
ase.data.frame_sha
base.data.frame_shan
